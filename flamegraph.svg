<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="634"><g><title>boggle`__rdl_alloc (1 samples, 0.16%)</title><rect x="1.7350%" y="341" width="0.1577%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="1"/><text x="1.9850%" y="351.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 2.21%)</title><rect x="1.7350%" y="357" width="2.2082%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="14"/><text x="1.9850%" y="367.50">b..</text></g><g><title>boggle`alloc::raw_vec::finish_grow (13 samples, 2.05%)</title><rect x="1.8927%" y="341" width="2.0505%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="13"/><text x="2.1427%" y="351.50">b..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 1.89%)</title><rect x="2.0505%" y="325" width="1.8927%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="12"/><text x="2.3005%" y="335.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 1.74%)</title><rect x="2.2082%" y="309" width="1.7350%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="11"/><text x="2.4582%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 1.74%)</title><rect x="2.2082%" y="293" width="1.7350%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="11"/><text x="2.4582%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 1.10%)</title><rect x="2.8391%" y="277" width="1.1041%" height="15" fill="rgb(207,160,47)" fg:x="18" fg:w="7"/><text x="3.0891%" y="287.50"></text></g><g><title>boggle`core::str::converts::from_utf8 (1 samples, 0.16%)</title><rect x="3.9432%" y="357" width="0.1577%" height="15" fill="rgb(228,23,34)" fg:x="25" fg:w="1"/><text x="4.1932%" y="367.50"></text></g><g><title>boggle`std::sys::unix::memchr::memchr (1 samples, 0.16%)</title><rect x="4.1009%" y="357" width="0.1577%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="1"/><text x="4.3509%" y="367.50"></text></g><g><title>boggle`&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 4.73%)</title><rect x="0.1577%" y="405" width="4.7319%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="30"/><text x="0.4077%" y="415.50">boggle..</text></g><g><title>boggle`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 3.94%)</title><rect x="0.9464%" y="389" width="3.9432%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="25"/><text x="1.1964%" y="399.50">bogg..</text></g><g><title>boggle`std::io::append_to_string (22 samples, 3.47%)</title><rect x="1.4196%" y="373" width="3.4700%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="22"/><text x="1.6696%" y="383.50">bog..</text></g><g><title>libsystem_kernel.dylib`read (4 samples, 0.63%)</title><rect x="4.2587%" y="357" width="0.6309%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="4"/><text x="4.5087%" y="367.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (3 samples, 0.47%)</title><rect x="5.2050%" y="229" width="0.4732%" height="15" fill="rgb(206,188,39)" fg:x="33" fg:w="3"/><text x="5.4550%" y="239.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.32%)</title><rect x="5.3628%" y="213" width="0.3155%" height="15" fill="rgb(217,207,13)" fg:x="34" fg:w="2"/><text x="5.6128%" y="223.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="5.5205%" y="197" width="0.1577%" height="15" fill="rgb(231,73,38)" fg:x="35" fg:w="1"/><text x="5.7705%" y="207.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="5.5205%" y="181" width="0.1577%" height="15" fill="rgb(225,20,46)" fg:x="35" fg:w="1"/><text x="5.7705%" y="191.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="5.5205%" y="165" width="0.1577%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="1"/><text x="5.7705%" y="175.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="5.5205%" y="149" width="0.1577%" height="15" fill="rgb(221,200,47)" fg:x="35" fg:w="1"/><text x="5.7705%" y="159.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="5.5205%" y="133" width="0.1577%" height="15" fill="rgb(226,26,5)" fg:x="35" fg:w="1"/><text x="5.7705%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="5.5205%" y="117" width="0.1577%" height="15" fill="rgb(249,33,26)" fg:x="35" fg:w="1"/><text x="5.7705%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="5.5205%" y="101" width="0.1577%" height="15" fill="rgb(235,183,28)" fg:x="35" fg:w="1"/><text x="5.7705%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="5.5205%" y="85" width="0.1577%" height="15" fill="rgb(221,5,38)" fg:x="35" fg:w="1"/><text x="5.7705%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="5.5205%" y="69" width="0.1577%" height="15" fill="rgb(247,18,42)" fg:x="35" fg:w="1"/><text x="5.7705%" y="79.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.63%)</title><rect x="5.2050%" y="245" width="0.6309%" height="15" fill="rgb(241,131,45)" fg:x="33" fg:w="4"/><text x="5.4550%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="5.6782%" y="229" width="0.1577%" height="15" fill="rgb(249,31,29)" fg:x="36" fg:w="1"/><text x="5.9282%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.32%)</title><rect x="5.8360%" y="181" width="0.3155%" height="15" fill="rgb(225,111,53)" fg:x="37" fg:w="2"/><text x="6.0860%" y="191.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.47%)</title><rect x="5.8360%" y="245" width="0.4732%" height="15" fill="rgb(238,160,17)" fg:x="37" fg:w="3"/><text x="6.0860%" y="255.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (3 samples, 0.47%)</title><rect x="5.8360%" y="229" width="0.4732%" height="15" fill="rgb(214,148,48)" fg:x="37" fg:w="3"/><text x="6.0860%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.47%)</title><rect x="5.8360%" y="213" width="0.4732%" height="15" fill="rgb(232,36,49)" fg:x="37" fg:w="3"/><text x="6.0860%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.47%)</title><rect x="5.8360%" y="197" width="0.4732%" height="15" fill="rgb(209,103,24)" fg:x="37" fg:w="3"/><text x="6.0860%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.16%)</title><rect x="6.1514%" y="181" width="0.1577%" height="15" fill="rgb(229,88,8)" fg:x="39" fg:w="1"/><text x="6.4014%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="6.1514%" y="165" width="0.1577%" height="15" fill="rgb(213,181,19)" fg:x="39" fg:w="1"/><text x="6.4014%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="6.1514%" y="149" width="0.1577%" height="15" fill="rgb(254,191,54)" fg:x="39" fg:w="1"/><text x="6.4014%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="6.1514%" y="133" width="0.1577%" height="15" fill="rgb(241,83,37)" fg:x="39" fg:w="1"/><text x="6.4014%" y="143.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="6.4669%" y="213" width="0.1577%" height="15" fill="rgb(233,36,39)" fg:x="41" fg:w="1"/><text x="6.7169%" y="223.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.32%)</title><rect x="6.4669%" y="229" width="0.3155%" height="15" fill="rgb(226,3,54)" fg:x="41" fg:w="2"/><text x="6.7169%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="6.6246%" y="213" width="0.1577%" height="15" fill="rgb(245,192,40)" fg:x="42" fg:w="1"/><text x="6.8746%" y="223.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (4 samples, 0.63%)</title><rect x="6.3091%" y="245" width="0.6309%" height="15" fill="rgb(238,167,29)" fg:x="40" fg:w="4"/><text x="6.5591%" y="255.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.16%)</title><rect x="6.7823%" y="229" width="0.1577%" height="15" fill="rgb(232,182,51)" fg:x="43" fg:w="1"/><text x="7.0323%" y="239.50"></text></g><g><title>boggle`__rdl_realloc (1 samples, 0.16%)</title><rect x="6.7823%" y="213" width="0.1577%" height="15" fill="rgb(231,60,39)" fg:x="43" fg:w="1"/><text x="7.0323%" y="223.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (14 samples, 2.21%)</title><rect x="4.8896%" y="261" width="2.2082%" height="15" fill="rgb(208,69,12)" fg:x="31" fg:w="14"/><text x="5.1396%" y="271.50">b..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="6.9401%" y="245" width="0.1577%" height="15" fill="rgb(235,93,37)" fg:x="44" fg:w="1"/><text x="7.1901%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="6.9401%" y="229" width="0.1577%" height="15" fill="rgb(213,116,39)" fg:x="44" fg:w="1"/><text x="7.1901%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="6.9401%" y="213" width="0.1577%" height="15" fill="rgb(222,207,29)" fg:x="44" fg:w="1"/><text x="7.1901%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.32%)</title><rect x="7.0978%" y="261" width="0.3155%" height="15" fill="rgb(206,96,30)" fg:x="45" fg:w="2"/><text x="7.3478%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="7.2555%" y="245" width="0.1577%" height="15" fill="rgb(218,138,4)" fg:x="46" fg:w="1"/><text x="7.5055%" y="255.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 2.84%)</title><rect x="4.8896%" y="277" width="2.8391%" height="15" fill="rgb(250,191,14)" fg:x="31" fg:w="18"/><text x="5.1396%" y="287.50">bo..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.32%)</title><rect x="7.4132%" y="261" width="0.3155%" height="15" fill="rgb(239,60,40)" fg:x="47" fg:w="2"/><text x="7.6632%" y="271.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="7.7287%" y="277" width="0.1577%" height="15" fill="rgb(206,27,48)" fg:x="49" fg:w="1"/><text x="7.9787%" y="287.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="7.7287%" y="261" width="0.1577%" height="15" fill="rgb(225,35,8)" fg:x="49" fg:w="1"/><text x="7.9787%" y="271.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (20 samples, 3.15%)</title><rect x="4.8896%" y="293" width="3.1546%" height="15" fill="rgb(250,213,24)" fg:x="31" fg:w="20"/><text x="5.1396%" y="303.50">bog..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="7.8864%" y="277" width="0.1577%" height="15" fill="rgb(247,123,22)" fg:x="50" fg:w="1"/><text x="8.1364%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="7.8864%" y="261" width="0.1577%" height="15" fill="rgb(231,138,38)" fg:x="50" fg:w="1"/><text x="8.1364%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="7.8864%" y="245" width="0.1577%" height="15" fill="rgb(231,145,46)" fg:x="50" fg:w="1"/><text x="8.1364%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="7.8864%" y="229" width="0.1577%" height="15" fill="rgb(251,118,11)" fg:x="50" fg:w="1"/><text x="8.1364%" y="239.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 3.31%)</title><rect x="4.8896%" y="309" width="3.3123%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="21"/><text x="5.1396%" y="319.50">bog..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="8.0442%" y="293" width="0.1577%" height="15" fill="rgb(247,81,37)" fg:x="51" fg:w="1"/><text x="8.2942%" y="303.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="8.3596%" y="229" width="0.1577%" height="15" fill="rgb(209,12,38)" fg:x="53" fg:w="1"/><text x="8.6096%" y="239.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="8.3596%" y="213" width="0.1577%" height="15" fill="rgb(227,1,9)" fg:x="53" fg:w="1"/><text x="8.6096%" y="223.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.16%)</title><rect x="8.3596%" y="197" width="0.1577%" height="15" fill="rgb(248,47,43)" fg:x="53" fg:w="1"/><text x="8.6096%" y="207.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (1 samples, 0.16%)</title><rect x="8.3596%" y="181" width="0.1577%" height="15" fill="rgb(221,10,30)" fg:x="53" fg:w="1"/><text x="8.6096%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.16%)</title><rect x="8.3596%" y="165" width="0.1577%" height="15" fill="rgb(210,229,1)" fg:x="53" fg:w="1"/><text x="8.6096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.16%)</title><rect x="8.3596%" y="149" width="0.1577%" height="15" fill="rgb(222,148,37)" fg:x="53" fg:w="1"/><text x="8.6096%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="8.3596%" y="133" width="0.1577%" height="15" fill="rgb(234,67,33)" fg:x="53" fg:w="1"/><text x="8.6096%" y="143.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (2 samples, 0.32%)</title><rect x="8.3596%" y="245" width="0.3155%" height="15" fill="rgb(247,98,35)" fg:x="53" fg:w="2"/><text x="8.6096%" y="255.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="8.5174%" y="229" width="0.1577%" height="15" fill="rgb(247,138,52)" fg:x="54" fg:w="1"/><text x="8.7674%" y="239.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.16%)</title><rect x="8.5174%" y="213" width="0.1577%" height="15" fill="rgb(213,79,30)" fg:x="54" fg:w="1"/><text x="8.7674%" y="223.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (1 samples, 0.16%)</title><rect x="8.5174%" y="197" width="0.1577%" height="15" fill="rgb(246,177,23)" fg:x="54" fg:w="1"/><text x="8.7674%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.16%)</title><rect x="8.5174%" y="181" width="0.1577%" height="15" fill="rgb(230,62,27)" fg:x="54" fg:w="1"/><text x="8.7674%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.16%)</title><rect x="8.5174%" y="165" width="0.1577%" height="15" fill="rgb(216,154,8)" fg:x="54" fg:w="1"/><text x="8.7674%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="8.5174%" y="149" width="0.1577%" height="15" fill="rgb(244,35,45)" fg:x="54" fg:w="1"/><text x="8.7674%" y="159.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (3 samples, 0.47%)</title><rect x="8.3596%" y="277" width="0.4732%" height="15" fill="rgb(251,115,12)" fg:x="53" fg:w="3"/><text x="8.6096%" y="287.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.47%)</title><rect x="8.3596%" y="261" width="0.4732%" height="15" fill="rgb(240,54,50)" fg:x="53" fg:w="3"/><text x="8.6096%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="8.6751%" y="245" width="0.1577%" height="15" fill="rgb(233,84,52)" fg:x="55" fg:w="1"/><text x="8.9251%" y="255.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.63%)</title><rect x="8.3596%" y="293" width="0.6309%" height="15" fill="rgb(207,117,47)" fg:x="53" fg:w="4"/><text x="8.6096%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="8.8328%" y="277" width="0.1577%" height="15" fill="rgb(249,43,39)" fg:x="56" fg:w="1"/><text x="9.0828%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="8.8328%" y="261" width="0.1577%" height="15" fill="rgb(209,38,44)" fg:x="56" fg:w="1"/><text x="9.0828%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="8.8328%" y="245" width="0.1577%" height="15" fill="rgb(236,212,23)" fg:x="56" fg:w="1"/><text x="9.0828%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="8.8328%" y="229" width="0.1577%" height="15" fill="rgb(242,79,21)" fg:x="56" fg:w="1"/><text x="9.0828%" y="239.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="9.1483%" y="277" width="0.1577%" height="15" fill="rgb(211,96,35)" fg:x="58" fg:w="1"/><text x="9.3983%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="9.1483%" y="261" width="0.1577%" height="15" fill="rgb(253,215,40)" fg:x="58" fg:w="1"/><text x="9.3983%" y="271.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (8 samples, 1.26%)</title><rect x="8.2019%" y="309" width="1.2618%" height="15" fill="rgb(211,81,21)" fg:x="52" fg:w="8"/><text x="8.4519%" y="319.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (3 samples, 0.47%)</title><rect x="8.9905%" y="293" width="0.4732%" height="15" fill="rgb(208,190,38)" fg:x="57" fg:w="3"/><text x="9.2405%" y="303.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="9.3060%" y="277" width="0.1577%" height="15" fill="rgb(235,213,38)" fg:x="59" fg:w="1"/><text x="9.5560%" y="287.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (30 samples, 4.73%)</title><rect x="4.8896%" y="325" width="4.7319%" height="15" fill="rgb(237,122,38)" fg:x="31" fg:w="30"/><text x="5.1396%" y="335.50">boggle..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="9.4637%" y="309" width="0.1577%" height="15" fill="rgb(244,218,35)" fg:x="60" fg:w="1"/><text x="9.7137%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="9.4637%" y="293" width="0.1577%" height="15" fill="rgb(240,68,47)" fg:x="60" fg:w="1"/><text x="9.7137%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="9.4637%" y="277" width="0.1577%" height="15" fill="rgb(210,16,53)" fg:x="60" fg:w="1"/><text x="9.7137%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="9.4637%" y="261" width="0.1577%" height="15" fill="rgb(235,124,12)" fg:x="60" fg:w="1"/><text x="9.7137%" y="271.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 4.89%)</title><rect x="4.8896%" y="341" width="4.8896%" height="15" fill="rgb(224,169,11)" fg:x="31" fg:w="31"/><text x="5.1396%" y="351.50">boggle..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="9.6215%" y="325" width="0.1577%" height="15" fill="rgb(250,166,2)" fg:x="61" fg:w="1"/><text x="9.8715%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="9.6215%" y="309" width="0.1577%" height="15" fill="rgb(242,216,29)" fg:x="61" fg:w="1"/><text x="9.8715%" y="319.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="9.9369%" y="309" width="0.1577%" height="15" fill="rgb(230,116,27)" fg:x="63" fg:w="1"/><text x="10.1869%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="9.9369%" y="293" width="0.1577%" height="15" fill="rgb(228,99,48)" fg:x="63" fg:w="1"/><text x="10.1869%" y="303.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="10.0946%" y="293" width="0.1577%" height="15" fill="rgb(253,11,6)" fg:x="64" fg:w="1"/><text x="10.3446%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="10.0946%" y="277" width="0.1577%" height="15" fill="rgb(247,143,39)" fg:x="64" fg:w="1"/><text x="10.3446%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="10.0946%" y="261" width="0.1577%" height="15" fill="rgb(236,97,10)" fg:x="64" fg:w="1"/><text x="10.3446%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="10.0946%" y="245" width="0.1577%" height="15" fill="rgb(233,208,19)" fg:x="64" fg:w="1"/><text x="10.3446%" y="255.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="10.2524%" y="261" width="0.1577%" height="15" fill="rgb(216,164,2)" fg:x="65" fg:w="1"/><text x="10.5024%" y="271.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="10.2524%" y="245" width="0.1577%" height="15" fill="rgb(220,129,5)" fg:x="65" fg:w="1"/><text x="10.5024%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="10.2524%" y="229" width="0.1577%" height="15" fill="rgb(242,17,10)" fg:x="65" fg:w="1"/><text x="10.5024%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="10.2524%" y="213" width="0.1577%" height="15" fill="rgb(242,107,0)" fg:x="65" fg:w="1"/><text x="10.5024%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="10.2524%" y="197" width="0.1577%" height="15" fill="rgb(251,28,31)" fg:x="65" fg:w="1"/><text x="10.5024%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="10.2524%" y="181" width="0.1577%" height="15" fill="rgb(233,223,10)" fg:x="65" fg:w="1"/><text x="10.5024%" y="191.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.32%)</title><rect x="10.2524%" y="293" width="0.3155%" height="15" fill="rgb(215,21,27)" fg:x="65" fg:w="2"/><text x="10.5024%" y="303.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (2 samples, 0.32%)</title><rect x="10.2524%" y="277" width="0.3155%" height="15" fill="rgb(232,23,21)" fg:x="65" fg:w="2"/><text x="10.5024%" y="287.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="10.4101%" y="261" width="0.1577%" height="15" fill="rgb(244,5,23)" fg:x="66" fg:w="1"/><text x="10.6601%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="10.4101%" y="245" width="0.1577%" height="15" fill="rgb(226,81,46)" fg:x="66" fg:w="1"/><text x="10.6601%" y="255.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.16%)</title><rect x="10.5678%" y="293" width="0.1577%" height="15" fill="rgb(247,70,30)" fg:x="67" fg:w="1"/><text x="10.8178%" y="303.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (1 samples, 0.16%)</title><rect x="10.5678%" y="277" width="0.1577%" height="15" fill="rgb(212,68,19)" fg:x="67" fg:w="1"/><text x="10.8178%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.16%)</title><rect x="10.5678%" y="261" width="0.1577%" height="15" fill="rgb(240,187,13)" fg:x="67" fg:w="1"/><text x="10.8178%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.16%)</title><rect x="10.5678%" y="245" width="0.1577%" height="15" fill="rgb(223,113,26)" fg:x="67" fg:w="1"/><text x="10.8178%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="10.5678%" y="229" width="0.1577%" height="15" fill="rgb(206,192,2)" fg:x="67" fg:w="1"/><text x="10.8178%" y="239.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.95%)</title><rect x="9.9369%" y="325" width="0.9464%" height="15" fill="rgb(241,108,4)" fg:x="63" fg:w="6"/><text x="10.1869%" y="335.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (5 samples, 0.79%)</title><rect x="10.0946%" y="309" width="0.7886%" height="15" fill="rgb(247,173,49)" fg:x="64" fg:w="5"/><text x="10.3446%" y="319.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="10.7256%" y="293" width="0.1577%" height="15" fill="rgb(224,114,35)" fg:x="68" fg:w="1"/><text x="10.9756%" y="303.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="10.7256%" y="277" width="0.1577%" height="15" fill="rgb(245,159,27)" fg:x="68" fg:w="1"/><text x="10.9756%" y="287.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="10.7256%" y="261" width="0.1577%" height="15" fill="rgb(245,172,44)" fg:x="68" fg:w="1"/><text x="10.9756%" y="271.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="10.7256%" y="245" width="0.1577%" height="15" fill="rgb(236,23,11)" fg:x="68" fg:w="1"/><text x="10.9756%" y="255.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="10.7256%" y="229" width="0.1577%" height="15" fill="rgb(205,117,38)" fg:x="68" fg:w="1"/><text x="10.9756%" y="239.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="10.7256%" y="213" width="0.1577%" height="15" fill="rgb(237,72,25)" fg:x="68" fg:w="1"/><text x="10.9756%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="10.7256%" y="197" width="0.1577%" height="15" fill="rgb(244,70,9)" fg:x="68" fg:w="1"/><text x="10.9756%" y="207.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 6.15%)</title><rect x="4.8896%" y="373" width="6.1514%" height="15" fill="rgb(217,125,39)" fg:x="31" fg:w="39"/><text x="5.1396%" y="383.50">boggle`&lt;..</text></g><g><title>boggle`boggle::solver::find_best_acc (39 samples, 6.15%)</title><rect x="4.8896%" y="357" width="6.1514%" height="15" fill="rgb(235,36,10)" fg:x="31" fg:w="39"/><text x="5.1396%" y="367.50">boggle`b..</text></g><g><title>boggle`boggle::solver::find_best_acc (8 samples, 1.26%)</title><rect x="9.7792%" y="341" width="1.2618%" height="15" fill="rgb(251,123,47)" fg:x="62" fg:w="8"/><text x="10.0292%" y="351.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="10.8833%" y="325" width="0.1577%" height="15" fill="rgb(221,13,13)" fg:x="69" fg:w="1"/><text x="11.1333%" y="335.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="10.8833%" y="309" width="0.1577%" height="15" fill="rgb(238,131,9)" fg:x="69" fg:w="1"/><text x="11.1333%" y="319.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="10.8833%" y="293" width="0.1577%" height="15" fill="rgb(211,50,8)" fg:x="69" fg:w="1"/><text x="11.1333%" y="303.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="10.8833%" y="277" width="0.1577%" height="15" fill="rgb(245,182,24)" fg:x="69" fg:w="1"/><text x="11.1333%" y="287.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="10.8833%" y="261" width="0.1577%" height="15" fill="rgb(242,14,37)" fg:x="69" fg:w="1"/><text x="11.1333%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="10.8833%" y="245" width="0.1577%" height="15" fill="rgb(246,228,12)" fg:x="69" fg:w="1"/><text x="11.1333%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="10.8833%" y="229" width="0.1577%" height="15" fill="rgb(213,55,15)" fg:x="69" fg:w="1"/><text x="11.1333%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="10.8833%" y="213" width="0.1577%" height="15" fill="rgb(209,9,3)" fg:x="69" fg:w="1"/><text x="11.1333%" y="223.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="11.1987%" y="293" width="0.1577%" height="15" fill="rgb(230,59,30)" fg:x="71" fg:w="1"/><text x="11.4487%" y="303.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.1987%" y="277" width="0.1577%" height="15" fill="rgb(209,121,21)" fg:x="71" fg:w="1"/><text x="11.4487%" y="287.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="11.1987%" y="261" width="0.1577%" height="15" fill="rgb(220,109,13)" fg:x="71" fg:w="1"/><text x="11.4487%" y="271.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.1987%" y="245" width="0.1577%" height="15" fill="rgb(232,18,1)" fg:x="71" fg:w="1"/><text x="11.4487%" y="255.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.1987%" y="229" width="0.1577%" height="15" fill="rgb(215,41,42)" fg:x="71" fg:w="1"/><text x="11.4487%" y="239.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.47%)</title><rect x="11.0410%" y="325" width="0.4732%" height="15" fill="rgb(224,123,36)" fg:x="70" fg:w="3"/><text x="11.2910%" y="335.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (2 samples, 0.32%)</title><rect x="11.1987%" y="309" width="0.3155%" height="15" fill="rgb(240,125,3)" fg:x="71" fg:w="2"/><text x="11.4487%" y="319.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.3565%" y="293" width="0.1577%" height="15" fill="rgb(205,98,50)" fg:x="72" fg:w="1"/><text x="11.6065%" y="303.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.3565%" y="277" width="0.1577%" height="15" fill="rgb(205,185,37)" fg:x="72" fg:w="1"/><text x="11.6065%" y="287.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="11.3565%" y="261" width="0.1577%" height="15" fill="rgb(238,207,15)" fg:x="72" fg:w="1"/><text x="11.6065%" y="271.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="11.3565%" y="245" width="0.1577%" height="15" fill="rgb(213,199,42)" fg:x="72" fg:w="1"/><text x="11.6065%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="11.3565%" y="229" width="0.1577%" height="15" fill="rgb(235,201,11)" fg:x="72" fg:w="1"/><text x="11.6065%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="11.3565%" y="213" width="0.1577%" height="15" fill="rgb(207,46,11)" fg:x="72" fg:w="1"/><text x="11.6065%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="11.3565%" y="197" width="0.1577%" height="15" fill="rgb(241,35,35)" fg:x="72" fg:w="1"/><text x="11.6065%" y="207.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.63%)</title><rect x="11.0410%" y="357" width="0.6309%" height="15" fill="rgb(243,32,47)" fg:x="70" fg:w="4"/><text x="11.2910%" y="367.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (4 samples, 0.63%)</title><rect x="11.0410%" y="341" width="0.6309%" height="15" fill="rgb(247,202,23)" fg:x="70" fg:w="4"/><text x="11.2910%" y="351.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.5142%" y="325" width="0.1577%" height="15" fill="rgb(219,102,11)" fg:x="73" fg:w="1"/><text x="11.7642%" y="335.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="11.5142%" y="309" width="0.1577%" height="15" fill="rgb(243,110,44)" fg:x="73" fg:w="1"/><text x="11.7642%" y="319.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.5142%" y="293" width="0.1577%" height="15" fill="rgb(222,74,54)" fg:x="73" fg:w="1"/><text x="11.7642%" y="303.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="11.5142%" y="277" width="0.1577%" height="15" fill="rgb(216,99,12)" fg:x="73" fg:w="1"/><text x="11.7642%" y="287.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.5142%" y="261" width="0.1577%" height="15" fill="rgb(226,22,26)" fg:x="73" fg:w="1"/><text x="11.7642%" y="271.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="11.5142%" y="245" width="0.1577%" height="15" fill="rgb(217,163,10)" fg:x="73" fg:w="1"/><text x="11.7642%" y="255.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.5142%" y="229" width="0.1577%" height="15" fill="rgb(213,25,53)" fg:x="73" fg:w="1"/><text x="11.7642%" y="239.50"></text></g><g><title>boggle`boggle::solver::find_best (46 samples, 7.26%)</title><rect x="4.8896%" y="405" width="7.2555%" height="15" fill="rgb(252,105,26)" fg:x="31" fg:w="46"/><text x="5.1396%" y="415.50">boggle`bog..</text></g><g><title>boggle`boggle::solver::find_best_acc (46 samples, 7.26%)</title><rect x="4.8896%" y="389" width="7.2555%" height="15" fill="rgb(220,39,43)" fg:x="31" fg:w="46"/><text x="5.1396%" y="399.50">boggle`bog..</text></g><g><title>boggle`boggle::solver::find_best_acc (7 samples, 1.10%)</title><rect x="11.0410%" y="373" width="1.1041%" height="15" fill="rgb(229,68,48)" fg:x="70" fg:w="7"/><text x="11.2910%" y="383.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (3 samples, 0.47%)</title><rect x="11.6719%" y="357" width="0.4732%" height="15" fill="rgb(252,8,32)" fg:x="74" fg:w="3"/><text x="11.9219%" y="367.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.47%)</title><rect x="11.6719%" y="341" width="0.4732%" height="15" fill="rgb(223,20,43)" fg:x="74" fg:w="3"/><text x="11.9219%" y="351.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (3 samples, 0.47%)</title><rect x="11.6719%" y="325" width="0.4732%" height="15" fill="rgb(229,81,49)" fg:x="74" fg:w="3"/><text x="11.9219%" y="335.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.47%)</title><rect x="11.6719%" y="309" width="0.4732%" height="15" fill="rgb(236,28,36)" fg:x="74" fg:w="3"/><text x="11.9219%" y="319.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (2 samples, 0.32%)</title><rect x="11.8297%" y="293" width="0.3155%" height="15" fill="rgb(249,185,26)" fg:x="75" fg:w="2"/><text x="12.0797%" y="303.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="11.9874%" y="277" width="0.1577%" height="15" fill="rgb(249,174,33)" fg:x="76" fg:w="1"/><text x="12.2374%" y="287.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.16%)</title><rect x="11.9874%" y="261" width="0.1577%" height="15" fill="rgb(233,201,37)" fg:x="76" fg:w="1"/><text x="12.2374%" y="271.50"></text></g><g><title>boggle`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.16%)</title><rect x="11.9874%" y="245" width="0.1577%" height="15" fill="rgb(221,78,26)" fg:x="76" fg:w="1"/><text x="12.2374%" y="255.50"></text></g><g><title>boggle`__rdl_alloc (1 samples, 0.16%)</title><rect x="15.4574%" y="389" width="0.1577%" height="15" fill="rgb(250,127,30)" fg:x="98" fg:w="1"/><text x="15.7074%" y="399.50"></text></g><g><title>boggle`__rust_alloc (1 samples, 0.16%)</title><rect x="15.6151%" y="389" width="0.1577%" height="15" fill="rgb(230,49,44)" fg:x="99" fg:w="1"/><text x="15.8651%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="16.4038%" y="357" width="0.3155%" height="15" fill="rgb(229,67,23)" fg:x="104" fg:w="2"/><text x="16.6538%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.16%)</title><rect x="16.8770%" y="341" width="0.1577%" height="15" fill="rgb(249,83,47)" fg:x="107" fg:w="1"/><text x="17.1270%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (2 samples, 0.32%)</title><rect x="23.3438%" y="325" width="0.3155%" height="15" fill="rgb(215,43,3)" fg:x="148" fg:w="2"/><text x="23.5938%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.32%)</title><rect x="23.3438%" y="309" width="0.3155%" height="15" fill="rgb(238,154,13)" fg:x="148" fg:w="2"/><text x="23.5938%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.47%)</title><rect x="23.6593%" y="325" width="0.4732%" height="15" fill="rgb(219,56,2)" fg:x="150" fg:w="3"/><text x="23.9093%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (58 samples, 9.15%)</title><rect x="16.2461%" y="373" width="9.1483%" height="15" fill="rgb(233,0,4)" fg:x="103" fg:w="58"/><text x="16.4961%" y="383.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (55 samples, 8.68%)</title><rect x="16.7192%" y="357" width="8.6751%" height="15" fill="rgb(235,30,7)" fg:x="106" fg:w="55"/><text x="16.9692%" y="367.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 8.36%)</title><rect x="17.0347%" y="341" width="8.3596%" height="15" fill="rgb(250,79,13)" fg:x="108" fg:w="53"/><text x="17.2847%" y="351.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 1.26%)</title><rect x="24.1325%" y="325" width="1.2618%" height="15" fill="rgb(211,146,34)" fg:x="153" fg:w="8"/><text x="24.3825%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.32%)</title><rect x="25.3943%" y="373" width="0.3155%" height="15" fill="rgb(228,22,38)" fg:x="161" fg:w="2"/><text x="25.6443%" y="383.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::blank (231 samples, 36.44%)</title><rect x="15.7729%" y="389" width="36.4353%" height="15" fill="rgb(235,168,5)" fg:x="100" fg:w="231"/><text x="16.0229%" y="399.50">boggle`boggle::word_dict::DictEntry::blank</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (168 samples, 26.50%)</title><rect x="25.7098%" y="373" width="26.4984%" height="15" fill="rgb(221,155,16)" fg:x="163" fg:w="168"/><text x="25.9598%" y="383.50">libsystem_platform.dylib`_platform_memmove..</text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.16%)</title><rect x="52.2082%" y="389" width="0.1577%" height="15" fill="rgb(215,215,53)" fg:x="331" fg:w="1"/><text x="52.4582%" y="399.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.32%)</title><rect x="52.3659%" y="389" width="0.3155%" height="15" fill="rgb(223,4,10)" fg:x="332" fg:w="2"/><text x="52.6159%" y="399.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::add_word (258 samples, 40.69%)</title><rect x="12.1451%" y="405" width="40.6940%" height="15" fill="rgb(234,103,6)" fg:x="77" fg:w="258"/><text x="12.3951%" y="415.50">boggle`boggle::word_dict::DictEntry::add_word</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.16%)</title><rect x="52.6814%" y="389" width="0.1577%" height="15" fill="rgb(227,97,0)" fg:x="334" fg:w="1"/><text x="52.9314%" y="399.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::blank (1 samples, 0.16%)</title><rect x="52.8391%" y="405" width="0.1577%" height="15" fill="rgb(234,150,53)" fg:x="335" fg:w="1"/><text x="53.0891%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="52.8391%" y="389" width="0.1577%" height="15" fill="rgb(228,201,54)" fg:x="335" fg:w="1"/><text x="53.0891%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.16%)</title><rect x="52.8391%" y="373" width="0.1577%" height="15" fill="rgb(222,22,37)" fg:x="335" fg:w="1"/><text x="53.0891%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.16%)</title><rect x="52.8391%" y="357" width="0.1577%" height="15" fill="rgb(237,53,32)" fg:x="335" fg:w="1"/><text x="53.0891%" y="367.50"></text></g><g><title>boggle`__rdl_dealloc (1 samples, 0.16%)</title><rect x="54.8896%" y="277" width="0.1577%" height="15" fill="rgb(233,25,53)" fg:x="348" fg:w="1"/><text x="55.1396%" y="287.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (5 samples, 0.79%)</title><rect x="62.4606%" y="149" width="0.7886%" height="15" fill="rgb(210,40,34)" fg:x="396" fg:w="5"/><text x="62.7106%" y="159.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (3 samples, 0.47%)</title><rect x="62.7760%" y="133" width="0.4732%" height="15" fill="rgb(241,220,44)" fg:x="398" fg:w="3"/><text x="63.0260%" y="143.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (1 samples, 0.16%)</title><rect x="63.0915%" y="117" width="0.1577%" height="15" fill="rgb(235,28,35)" fg:x="400" fg:w="1"/><text x="63.3415%" y="127.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (1 samples, 0.16%)</title><rect x="63.0915%" y="101" width="0.1577%" height="15" fill="rgb(210,56,17)" fg:x="400" fg:w="1"/><text x="63.3415%" y="111.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (1 samples, 0.16%)</title><rect x="63.0915%" y="85" width="0.1577%" height="15" fill="rgb(224,130,29)" fg:x="400" fg:w="1"/><text x="63.3415%" y="95.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (1 samples, 0.16%)</title><rect x="63.0915%" y="69" width="0.1577%" height="15" fill="rgb(235,212,8)" fg:x="400" fg:w="1"/><text x="63.3415%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.16%)</title><rect x="63.0915%" y="53" width="0.1577%" height="15" fill="rgb(223,33,50)" fg:x="400" fg:w="1"/><text x="63.3415%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.16%)</title><rect x="63.0915%" y="37" width="0.1577%" height="15" fill="rgb(219,149,13)" fg:x="400" fg:w="1"/><text x="63.3415%" y="47.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (7 samples, 1.10%)</title><rect x="62.4606%" y="165" width="1.1041%" height="15" fill="rgb(250,156,29)" fg:x="396" fg:w="7"/><text x="62.7106%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.32%)</title><rect x="63.2492%" y="149" width="0.3155%" height="15" fill="rgb(216,193,19)" fg:x="401" fg:w="2"/><text x="63.4992%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.32%)</title><rect x="63.2492%" y="133" width="0.3155%" height="15" fill="rgb(216,135,14)" fg:x="401" fg:w="2"/><text x="63.4992%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.16%)</title><rect x="63.4069%" y="117" width="0.1577%" height="15" fill="rgb(241,47,5)" fg:x="402" fg:w="1"/><text x="63.6569%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.32%)</title><rect x="63.5647%" y="165" width="0.3155%" height="15" fill="rgb(233,42,35)" fg:x="403" fg:w="2"/><text x="63.8147%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.32%)</title><rect x="63.5647%" y="149" width="0.3155%" height="15" fill="rgb(231,13,6)" fg:x="403" fg:w="2"/><text x="63.8147%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.16%)</title><rect x="63.7224%" y="133" width="0.1577%" height="15" fill="rgb(207,181,40)" fg:x="404" fg:w="1"/><text x="63.9724%" y="143.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (17 samples, 2.68%)</title><rect x="61.6719%" y="181" width="2.6814%" height="15" fill="rgb(254,173,49)" fg:x="391" fg:w="17"/><text x="61.9219%" y="191.50">bo..</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.47%)</title><rect x="63.8801%" y="165" width="0.4732%" height="15" fill="rgb(221,1,38)" fg:x="405" fg:w="3"/><text x="64.1301%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.47%)</title><rect x="63.8801%" y="149" width="0.4732%" height="15" fill="rgb(206,124,46)" fg:x="405" fg:w="3"/><text x="64.1301%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.32%)</title><rect x="64.0379%" y="133" width="0.3155%" height="15" fill="rgb(249,21,11)" fg:x="406" fg:w="2"/><text x="64.2879%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.16%)</title><rect x="64.1956%" y="117" width="0.1577%" height="15" fill="rgb(222,201,40)" fg:x="407" fg:w="1"/><text x="64.4456%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="64.3533%" y="181" width="0.1577%" height="15" fill="rgb(235,61,29)" fg:x="408" fg:w="1"/><text x="64.6033%" y="191.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (25 samples, 3.94%)</title><rect x="61.0410%" y="197" width="3.9432%" height="15" fill="rgb(219,207,3)" fg:x="387" fg:w="25"/><text x="61.2910%" y="207.50">bogg..</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.47%)</title><rect x="64.5110%" y="181" width="0.4732%" height="15" fill="rgb(222,56,46)" fg:x="409" fg:w="3"/><text x="64.7610%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.32%)</title><rect x="64.6688%" y="165" width="0.3155%" height="15" fill="rgb(239,76,54)" fg:x="410" fg:w="2"/><text x="64.9188%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.16%)</title><rect x="64.8265%" y="149" width="0.1577%" height="15" fill="rgb(231,124,27)" fg:x="411" fg:w="1"/><text x="65.0765%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.16%)</title><rect x="64.8265%" y="133" width="0.1577%" height="15" fill="rgb(249,195,6)" fg:x="411" fg:w="1"/><text x="65.0765%" y="143.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (35 samples, 5.52%)</title><rect x="59.9369%" y="213" width="5.5205%" height="15" fill="rgb(237,174,47)" fg:x="380" fg:w="35"/><text x="60.1869%" y="223.50">boggle`..</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.47%)</title><rect x="64.9842%" y="197" width="0.4732%" height="15" fill="rgb(206,201,31)" fg:x="412" fg:w="3"/><text x="65.2342%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.32%)</title><rect x="65.1420%" y="181" width="0.3155%" height="15" fill="rgb(231,57,52)" fg:x="413" fg:w="2"/><text x="65.3920%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="65.4574%" y="197" width="0.1577%" height="15" fill="rgb(248,177,22)" fg:x="415" fg:w="1"/><text x="65.7074%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.63%)</title><rect x="65.4574%" y="213" width="0.6309%" height="15" fill="rgb(215,211,37)" fg:x="415" fg:w="4"/><text x="65.7074%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.47%)</title><rect x="65.6151%" y="197" width="0.4732%" height="15" fill="rgb(241,128,51)" fg:x="416" fg:w="3"/><text x="65.8651%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.47%)</title><rect x="65.6151%" y="181" width="0.4732%" height="15" fill="rgb(227,165,31)" fg:x="416" fg:w="3"/><text x="65.8651%" y="191.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (50 samples, 7.89%)</title><rect x="58.6751%" y="229" width="7.8864%" height="15" fill="rgb(228,167,24)" fg:x="372" fg:w="50"/><text x="58.9251%" y="239.50">boggle`core..</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.47%)</title><rect x="66.0883%" y="213" width="0.4732%" height="15" fill="rgb(228,143,12)" fg:x="419" fg:w="3"/><text x="66.3383%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.47%)</title><rect x="66.0883%" y="197" width="0.4732%" height="15" fill="rgb(249,149,8)" fg:x="419" fg:w="3"/><text x="66.3383%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.16%)</title><rect x="66.4038%" y="181" width="0.1577%" height="15" fill="rgb(243,35,44)" fg:x="421" fg:w="1"/><text x="66.6538%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.16%)</title><rect x="66.4038%" y="165" width="0.1577%" height="15" fill="rgb(246,89,9)" fg:x="421" fg:w="1"/><text x="66.6538%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="66.5615%" y="229" width="0.1577%" height="15" fill="rgb(233,213,13)" fg:x="422" fg:w="1"/><text x="66.8115%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.16%)</title><rect x="67.5079%" y="197" width="0.1577%" height="15" fill="rgb(233,141,41)" fg:x="428" fg:w="1"/><text x="67.7579%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.16%)</title><rect x="67.6656%" y="197" width="0.1577%" height="15" fill="rgb(239,167,4)" fg:x="429" fg:w="1"/><text x="67.9156%" y="207.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (65 samples, 10.25%)</title><rect x="57.8864%" y="245" width="10.2524%" height="15" fill="rgb(209,217,16)" fg:x="367" fg:w="65"/><text x="58.1364%" y="255.50">boggle`core::pt..</text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 1.42%)</title><rect x="66.7192%" y="229" width="1.4196%" height="15" fill="rgb(219,88,35)" fg:x="423" fg:w="9"/><text x="66.9692%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 1.26%)</title><rect x="66.8770%" y="213" width="1.2618%" height="15" fill="rgb(220,193,23)" fg:x="424" fg:w="8"/><text x="67.1270%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.32%)</title><rect x="67.8233%" y="197" width="0.3155%" height="15" fill="rgb(230,90,52)" fg:x="430" fg:w="2"/><text x="68.0733%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.32%)</title><rect x="67.8233%" y="181" width="0.3155%" height="15" fill="rgb(252,106,19)" fg:x="430" fg:w="2"/><text x="68.0733%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="68.4543%" y="229" width="0.1577%" height="15" fill="rgb(206,74,20)" fg:x="434" fg:w="1"/><text x="68.7043%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.63%)</title><rect x="68.1388%" y="245" width="0.6309%" height="15" fill="rgb(230,138,44)" fg:x="432" fg:w="4"/><text x="68.3888%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.16%)</title><rect x="68.6120%" y="229" width="0.1577%" height="15" fill="rgb(235,182,43)" fg:x="435" fg:w="1"/><text x="68.8620%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.16%)</title><rect x="68.6120%" y="213" width="0.1577%" height="15" fill="rgb(242,16,51)" fg:x="435" fg:w="1"/><text x="68.8620%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.16%)</title><rect x="69.0852%" y="213" width="0.1577%" height="15" fill="rgb(248,9,4)" fg:x="438" fg:w="1"/><text x="69.3352%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.16%)</title><rect x="69.0852%" y="197" width="0.1577%" height="15" fill="rgb(210,31,22)" fg:x="438" fg:w="1"/><text x="69.3352%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.16%)</title><rect x="69.2429%" y="213" width="0.1577%" height="15" fill="rgb(239,54,39)" fg:x="439" fg:w="1"/><text x="69.4929%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.32%)</title><rect x="69.4006%" y="213" width="0.3155%" height="15" fill="rgb(230,99,41)" fg:x="440" fg:w="2"/><text x="69.6506%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.16%)</title><rect x="69.7161%" y="213" width="0.1577%" height="15" fill="rgb(253,106,12)" fg:x="442" fg:w="1"/><text x="69.9661%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (2 samples, 0.32%)</title><rect x="69.8738%" y="213" width="0.3155%" height="15" fill="rgb(213,46,41)" fg:x="443" fg:w="2"/><text x="70.1238%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (4 samples, 0.63%)</title><rect x="70.1893%" y="213" width="0.6309%" height="15" fill="rgb(215,133,35)" fg:x="445" fg:w="4"/><text x="70.4393%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.63%)</title><rect x="70.1893%" y="197" width="0.6309%" height="15" fill="rgb(213,28,5)" fg:x="445" fg:w="4"/><text x="70.4393%" y="207.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (91 samples, 14.35%)</title><rect x="56.6246%" y="261" width="14.3533%" height="15" fill="rgb(215,77,49)" fg:x="359" fg:w="91"/><text x="56.8746%" y="271.50">boggle`core::ptr::drop..</text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 2.21%)</title><rect x="68.7697%" y="245" width="2.2082%" height="15" fill="rgb(248,100,22)" fg:x="436" fg:w="14"/><text x="69.0197%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 1.89%)</title><rect x="69.0852%" y="229" width="1.8927%" height="15" fill="rgb(208,67,9)" fg:x="438" fg:w="12"/><text x="69.3352%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.16%)</title><rect x="70.8202%" y="213" width="0.1577%" height="15" fill="rgb(219,133,21)" fg:x="449" fg:w="1"/><text x="71.0702%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.16%)</title><rect x="70.8202%" y="197" width="0.1577%" height="15" fill="rgb(246,46,29)" fg:x="449" fg:w="1"/><text x="71.0702%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.95%)</title><rect x="70.9779%" y="261" width="0.9464%" height="15" fill="rgb(246,185,52)" fg:x="450" fg:w="6"/><text x="71.2279%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.63%)</title><rect x="71.2934%" y="245" width="0.6309%" height="15" fill="rgb(252,136,11)" fg:x="452" fg:w="4"/><text x="71.5434%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.63%)</title><rect x="71.2934%" y="229" width="0.6309%" height="15" fill="rgb(219,138,53)" fg:x="452" fg:w="4"/><text x="71.5434%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.16%)</title><rect x="72.5552%" y="229" width="0.1577%" height="15" fill="rgb(211,51,23)" fg:x="460" fg:w="1"/><text x="72.8052%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.16%)</title><rect x="72.5552%" y="213" width="0.1577%" height="15" fill="rgb(247,221,28)" fg:x="460" fg:w="1"/><text x="72.8052%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.16%)</title><rect x="72.7129%" y="229" width="0.1577%" height="15" fill="rgb(251,222,45)" fg:x="461" fg:w="1"/><text x="72.9629%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.16%)</title><rect x="72.8707%" y="229" width="0.1577%" height="15" fill="rgb(217,162,53)" fg:x="462" fg:w="1"/><text x="73.1207%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.32%)</title><rect x="73.0284%" y="229" width="0.3155%" height="15" fill="rgb(229,93,14)" fg:x="463" fg:w="2"/><text x="73.2784%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.32%)</title><rect x="73.0284%" y="213" width="0.3155%" height="15" fill="rgb(209,67,49)" fg:x="463" fg:w="2"/><text x="73.2784%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 2.84%)</title><rect x="71.9243%" y="261" width="2.8391%" height="15" fill="rgb(213,87,29)" fg:x="456" fg:w="18"/><text x="72.1743%" y="271.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 2.68%)</title><rect x="72.0820%" y="245" width="2.6814%" height="15" fill="rgb(205,151,52)" fg:x="457" fg:w="17"/><text x="72.3320%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (9 samples, 1.42%)</title><rect x="73.3438%" y="229" width="1.4196%" height="15" fill="rgb(253,215,39)" fg:x="465" fg:w="9"/><text x="73.5938%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 1.26%)</title><rect x="73.5016%" y="213" width="1.2618%" height="15" fill="rgb(221,220,41)" fg:x="466" fg:w="8"/><text x="73.7516%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="74.7634%" y="261" width="0.1577%" height="15" fill="rgb(218,133,21)" fg:x="474" fg:w="1"/><text x="75.0134%" y="271.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (127 samples, 20.03%)</title><rect x="55.0473%" y="277" width="20.0315%" height="15" fill="rgb(221,193,43)" fg:x="349" fg:w="127"/><text x="55.2973%" y="287.50">boggle`core::ptr::drop_in_place..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.16%)</title><rect x="74.9211%" y="261" width="0.1577%" height="15" fill="rgb(240,128,52)" fg:x="475" fg:w="1"/><text x="75.1711%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.63%)</title><rect x="75.0789%" y="277" width="0.6309%" height="15" fill="rgb(253,114,12)" fg:x="476" fg:w="4"/><text x="75.3289%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.32%)</title><rect x="75.3943%" y="261" width="0.3155%" height="15" fill="rgb(215,223,47)" fg:x="478" fg:w="2"/><text x="75.6443%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.32%)</title><rect x="75.3943%" y="245" width="0.3155%" height="15" fill="rgb(248,225,23)" fg:x="478" fg:w="2"/><text x="75.6443%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.16%)</title><rect x="76.8139%" y="245" width="0.1577%" height="15" fill="rgb(250,108,0)" fg:x="487" fg:w="1"/><text x="77.0639%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.16%)</title><rect x="76.8139%" y="229" width="0.1577%" height="15" fill="rgb(228,208,7)" fg:x="487" fg:w="1"/><text x="77.0639%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.32%)</title><rect x="76.9716%" y="245" width="0.3155%" height="15" fill="rgb(244,45,10)" fg:x="488" fg:w="2"/><text x="77.2216%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.16%)</title><rect x="77.2871%" y="245" width="0.1577%" height="15" fill="rgb(207,125,25)" fg:x="490" fg:w="1"/><text x="77.5371%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1 samples, 0.16%)</title><rect x="77.4448%" y="245" width="0.1577%" height="15" fill="rgb(210,195,18)" fg:x="491" fg:w="1"/><text x="77.6948%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.32%)</title><rect x="77.6025%" y="245" width="0.3155%" height="15" fill="rgb(249,80,12)" fg:x="492" fg:w="2"/><text x="77.8525%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.32%)</title><rect x="77.6025%" y="229" width="0.3155%" height="15" fill="rgb(221,65,9)" fg:x="492" fg:w="2"/><text x="77.8525%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 2.84%)</title><rect x="75.7098%" y="277" width="2.8391%" height="15" fill="rgb(235,49,36)" fg:x="480" fg:w="18"/><text x="75.9598%" y="287.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 2.52%)</title><rect x="76.0252%" y="261" width="2.5237%" height="15" fill="rgb(225,32,20)" fg:x="482" fg:w="16"/><text x="76.2752%" y="271.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (4 samples, 0.63%)</title><rect x="77.9180%" y="245" width="0.6309%" height="15" fill="rgb(215,141,46)" fg:x="494" fg:w="4"/><text x="78.1680%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.47%)</title><rect x="78.0757%" y="229" width="0.4732%" height="15" fill="rgb(250,160,47)" fg:x="495" fg:w="3"/><text x="78.3257%" y="239.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (156 samples, 24.61%)</title><rect x="54.1009%" y="293" width="24.6057%" height="15" fill="rgb(216,222,40)" fg:x="343" fg:w="156"/><text x="54.3509%" y="303.50">boggle`core::ptr::drop_in_place&lt;boggle:..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="78.5489%" y="277" width="0.1577%" height="15" fill="rgb(234,217,39)" fg:x="498" fg:w="1"/><text x="78.7989%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 1.26%)</title><rect x="78.7066%" y="293" width="1.2618%" height="15" fill="rgb(207,178,40)" fg:x="499" fg:w="8"/><text x="78.9566%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.47%)</title><rect x="79.4953%" y="277" width="0.4732%" height="15" fill="rgb(221,136,13)" fg:x="504" fg:w="3"/><text x="79.7453%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.32%)</title><rect x="79.6530%" y="261" width="0.3155%" height="15" fill="rgb(249,199,10)" fg:x="505" fg:w="2"/><text x="79.9030%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.16%)</title><rect x="81.0726%" y="261" width="0.1577%" height="15" fill="rgb(249,222,13)" fg:x="514" fg:w="1"/><text x="81.3226%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.32%)</title><rect x="81.2303%" y="261" width="0.3155%" height="15" fill="rgb(244,185,38)" fg:x="515" fg:w="2"/><text x="81.4803%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.32%)</title><rect x="81.5457%" y="261" width="0.3155%" height="15" fill="rgb(236,202,9)" fg:x="517" fg:w="2"/><text x="81.7957%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.32%)</title><rect x="81.5457%" y="245" width="0.3155%" height="15" fill="rgb(250,229,37)" fg:x="517" fg:w="2"/><text x="81.7957%" y="255.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (192 samples, 30.28%)</title><rect x="53.4700%" y="309" width="30.2839%" height="15" fill="rgb(206,174,23)" fg:x="339" fg:w="192"/><text x="53.7200%" y="319.50">boggle`core::ptr::drop_in_place&lt;boggle::word_dict..</text></g><g><title>libsystem_malloc.dylib`free_tiny (24 samples, 3.79%)</title><rect x="79.9685%" y="293" width="3.7855%" height="15" fill="rgb(211,33,43)" fg:x="507" fg:w="24"/><text x="80.2185%" y="303.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 3.47%)</title><rect x="80.2839%" y="277" width="3.4700%" height="15" fill="rgb(245,58,50)" fg:x="509" fg:w="22"/><text x="80.5339%" y="287.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (12 samples, 1.89%)</title><rect x="81.8612%" y="261" width="1.8927%" height="15" fill="rgb(244,68,36)" fg:x="519" fg:w="12"/><text x="82.1112%" y="271.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 1.42%)</title><rect x="82.3344%" y="245" width="1.4196%" height="15" fill="rgb(232,229,15)" fg:x="522" fg:w="9"/><text x="82.5844%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.16%)</title><rect x="83.7539%" y="293" width="0.1577%" height="15" fill="rgb(254,30,23)" fg:x="531" fg:w="1"/><text x="84.0039%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.32%)</title><rect x="84.7003%" y="277" width="0.3155%" height="15" fill="rgb(235,160,14)" fg:x="537" fg:w="2"/><text x="84.9503%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.32%)</title><rect x="84.7003%" y="261" width="0.3155%" height="15" fill="rgb(212,155,44)" fg:x="537" fg:w="2"/><text x="84.9503%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.16%)</title><rect x="85.0158%" y="277" width="0.1577%" height="15" fill="rgb(226,2,50)" fg:x="539" fg:w="1"/><text x="85.2658%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.16%)</title><rect x="85.1735%" y="277" width="0.1577%" height="15" fill="rgb(234,177,6)" fg:x="540" fg:w="1"/><text x="85.4235%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.47%)</title><rect x="85.3312%" y="277" width="0.4732%" height="15" fill="rgb(217,24,9)" fg:x="541" fg:w="3"/><text x="85.5812%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (5 samples, 0.79%)</title><rect x="85.8044%" y="277" width="0.7886%" height="15" fill="rgb(220,13,46)" fg:x="544" fg:w="5"/><text x="86.0544%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.79%)</title><rect x="85.8044%" y="261" width="0.7886%" height="15" fill="rgb(239,221,27)" fg:x="544" fg:w="5"/><text x="86.0544%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 1.89%)</title><rect x="86.9085%" y="261" width="1.8927%" height="15" fill="rgb(222,198,25)" fg:x="551" fg:w="12"/><text x="87.1585%" y="271.50">l..</text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (226 samples, 35.65%)</title><rect x="53.3123%" y="325" width="35.6467%" height="15" fill="rgb(211,99,13)" fg:x="338" fg:w="226"/><text x="53.5623%" y="335.50">boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEnt..</text></g><g><title>libsystem_malloc.dylib`free_tiny (33 samples, 5.21%)</title><rect x="83.7539%" y="309" width="5.2050%" height="15" fill="rgb(232,111,31)" fg:x="531" fg:w="33"/><text x="84.0039%" y="319.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (32 samples, 5.05%)</title><rect x="83.9117%" y="293" width="5.0473%" height="15" fill="rgb(245,82,37)" fg:x="532" fg:w="32"/><text x="84.1617%" y="303.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (15 samples, 2.37%)</title><rect x="86.5931%" y="277" width="2.3659%" height="15" fill="rgb(227,149,46)" fg:x="549" fg:w="15"/><text x="86.8431%" y="287.50">li..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (1 samples, 0.16%)</title><rect x="88.8013%" y="261" width="0.1577%" height="15" fill="rgb(218,36,50)" fg:x="563" fg:w="1"/><text x="89.0513%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="88.9590%" y="325" width="0.1577%" height="15" fill="rgb(226,80,48)" fg:x="564" fg:w="1"/><text x="89.2090%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.16%)</title><rect x="88.9590%" y="309" width="0.1577%" height="15" fill="rgb(238,224,15)" fg:x="564" fg:w="1"/><text x="89.2090%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.16%)</title><rect x="88.9590%" y="293" width="0.1577%" height="15" fill="rgb(241,136,10)" fg:x="564" fg:w="1"/><text x="89.2090%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.16%)</title><rect x="89.1167%" y="309" width="0.1577%" height="15" fill="rgb(208,32,45)" fg:x="565" fg:w="1"/><text x="89.3667%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.16%)</title><rect x="89.7476%" y="293" width="0.1577%" height="15" fill="rgb(207,135,9)" fg:x="569" fg:w="1"/><text x="89.9976%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.16%)</title><rect x="89.7476%" y="277" width="0.1577%" height="15" fill="rgb(206,86,44)" fg:x="569" fg:w="1"/><text x="89.9976%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.16%)</title><rect x="89.9054%" y="293" width="0.1577%" height="15" fill="rgb(245,177,15)" fg:x="570" fg:w="1"/><text x="90.1554%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 2.84%)</title><rect x="89.1167%" y="325" width="2.8391%" height="15" fill="rgb(206,64,50)" fg:x="565" fg:w="18"/><text x="89.3667%" y="335.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 2.68%)</title><rect x="89.2744%" y="309" width="2.6814%" height="15" fill="rgb(234,36,40)" fg:x="566" fg:w="17"/><text x="89.5244%" y="319.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (12 samples, 1.89%)</title><rect x="90.0631%" y="293" width="1.8927%" height="15" fill="rgb(213,64,8)" fg:x="571" fg:w="12"/><text x="90.3131%" y="303.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 1.58%)</title><rect x="90.3785%" y="277" width="1.5773%" height="15" fill="rgb(210,75,36)" fg:x="573" fg:w="10"/><text x="90.6285%" y="287.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (248 samples, 39.12%)</title><rect x="52.9968%" y="341" width="39.1167%" height="15" fill="rgb(229,88,21)" fg:x="336" fg:w="248"/><text x="53.2468%" y="351.50">boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt;</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.16%)</title><rect x="91.9558%" y="325" width="0.1577%" height="15" fill="rgb(252,204,47)" fg:x="583" fg:w="1"/><text x="92.2058%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="92.1136%" y="341" width="0.1577%" height="15" fill="rgb(208,77,27)" fg:x="584" fg:w="1"/><text x="92.3636%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.16%)</title><rect x="92.1136%" y="325" width="0.1577%" height="15" fill="rgb(221,76,26)" fg:x="584" fg:w="1"/><text x="92.3636%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.16%)</title><rect x="92.1136%" y="309" width="0.1577%" height="15" fill="rgb(225,139,18)" fg:x="584" fg:w="1"/><text x="92.3636%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (7 samples, 1.10%)</title><rect x="92.2713%" y="309" width="1.1041%" height="15" fill="rgb(230,137,11)" fg:x="585" fg:w="7"/><text x="92.5213%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.95%)</title><rect x="92.4290%" y="293" width="0.9464%" height="15" fill="rgb(212,28,1)" fg:x="586" fg:w="6"/><text x="92.6790%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.16%)</title><rect x="93.3754%" y="309" width="0.1577%" height="15" fill="rgb(248,164,17)" fg:x="592" fg:w="1"/><text x="93.6254%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 1.74%)</title><rect x="92.2713%" y="341" width="1.7350%" height="15" fill="rgb(222,171,42)" fg:x="585" fg:w="11"/><text x="92.5213%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 1.74%)</title><rect x="92.2713%" y="325" width="1.7350%" height="15" fill="rgb(243,84,45)" fg:x="585" fg:w="11"/><text x="92.5213%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (3 samples, 0.47%)</title><rect x="93.5331%" y="309" width="0.4732%" height="15" fill="rgb(252,49,23)" fg:x="593" fg:w="3"/><text x="93.7831%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.47%)</title><rect x="93.5331%" y="293" width="0.4732%" height="15" fill="rgb(215,19,7)" fg:x="593" fg:w="3"/><text x="93.7831%" y="303.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (261 samples, 41.17%)</title><rect x="52.9968%" y="357" width="41.1672%" height="15" fill="rgb(238,81,41)" fg:x="336" fg:w="261"/><text x="53.2468%" y="367.50">boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt;</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="94.0063%" y="341" width="0.1577%" height="15" fill="rgb(210,199,37)" fg:x="596" fg:w="1"/><text x="94.2563%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (11 samples, 1.74%)</title><rect x="94.1640%" y="325" width="1.7350%" height="15" fill="rgb(244,192,49)" fg:x="597" fg:w="11"/><text x="94.4140%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (11 samples, 1.74%)</title><rect x="94.1640%" y="309" width="1.7350%" height="15" fill="rgb(226,211,11)" fg:x="597" fg:w="11"/><text x="94.4140%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_try_depot_unmap_no_lock (1 samples, 0.16%)</title><rect x="95.8991%" y="325" width="0.1577%" height="15" fill="rgb(236,162,54)" fg:x="608" fg:w="1"/><text x="96.1491%" y="335.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (277 samples, 43.69%)</title><rect x="52.9968%" y="373" width="43.6909%" height="15" fill="rgb(220,229,9)" fg:x="336" fg:w="277"/><text x="53.2468%" y="383.50">boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt;</text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 2.52%)</title><rect x="94.1640%" y="357" width="2.5237%" height="15" fill="rgb(250,87,22)" fg:x="597" fg:w="16"/><text x="94.4140%" y="367.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 2.52%)</title><rect x="94.1640%" y="341" width="2.5237%" height="15" fill="rgb(239,43,17)" fg:x="597" fg:w="16"/><text x="94.4140%" y="351.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (4 samples, 0.63%)</title><rect x="96.0568%" y="325" width="0.6309%" height="15" fill="rgb(231,177,25)" fg:x="609" fg:w="4"/><text x="96.3068%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.47%)</title><rect x="96.2145%" y="309" width="0.4732%" height="15" fill="rgb(219,179,1)" fg:x="610" fg:w="3"/><text x="96.4645%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.79%)</title><rect x="96.6877%" y="341" width="0.7886%" height="15" fill="rgb(238,219,53)" fg:x="613" fg:w="5"/><text x="96.9377%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.79%)</title><rect x="96.6877%" y="325" width="0.7886%" height="15" fill="rgb(232,167,36)" fg:x="613" fg:w="5"/><text x="96.9377%" y="335.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (283 samples, 44.64%)</title><rect x="52.9968%" y="389" width="44.6372%" height="15" fill="rgb(244,19,51)" fg:x="336" fg:w="283"/><text x="53.2468%" y="399.50">boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt;</text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.95%)</title><rect x="96.6877%" y="373" width="0.9464%" height="15" fill="rgb(224,6,22)" fg:x="613" fg:w="6"/><text x="96.9377%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.95%)</title><rect x="96.6877%" y="357" width="0.9464%" height="15" fill="rgb(224,145,5)" fg:x="613" fg:w="6"/><text x="96.9377%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.16%)</title><rect x="97.4763%" y="341" width="0.1577%" height="15" fill="rgb(234,130,49)" fg:x="618" fg:w="1"/><text x="97.7263%" y="351.50"></text></g><g><title>boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt; (286 samples, 45.11%)</title><rect x="52.9968%" y="405" width="45.1104%" height="15" fill="rgb(254,6,2)" fg:x="336" fg:w="286"/><text x="53.2468%" y="415.50">boggle`core::ptr::drop_in_place&lt;boggle::word_dict::DictEntry&gt;</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.47%)</title><rect x="97.6341%" y="389" width="0.4732%" height="15" fill="rgb(208,96,46)" fg:x="619" fg:w="3"/><text x="97.8841%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.47%)</title><rect x="97.6341%" y="373" width="0.4732%" height="15" fill="rgb(239,3,39)" fg:x="619" fg:w="3"/><text x="97.8841%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.47%)</title><rect x="97.6341%" y="357" width="0.4732%" height="15" fill="rgb(233,210,1)" fg:x="619" fg:w="3"/><text x="97.8841%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.47%)</title><rect x="97.6341%" y="341" width="0.4732%" height="15" fill="rgb(244,137,37)" fg:x="619" fg:w="3"/><text x="97.8841%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.32%)</title><rect x="98.1073%" y="405" width="0.3155%" height="15" fill="rgb(240,136,2)" fg:x="622" fg:w="2"/><text x="98.3573%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="98.2650%" y="389" width="0.1577%" height="15" fill="rgb(239,18,37)" fg:x="623" fg:w="1"/><text x="98.5150%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.32%)</title><rect x="98.4227%" y="405" width="0.3155%" height="15" fill="rgb(218,185,22)" fg:x="624" fg:w="2"/><text x="98.6727%" y="415.50"></text></g><g><title>boggle`boggle::main (631 samples, 99.53%)</title><rect x="0.0000%" y="421" width="99.5268%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="631"/><text x="0.2500%" y="431.50">boggle`boggle::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.79%)</title><rect x="98.7382%" y="405" width="0.7886%" height="15" fill="rgb(230,182,32)" fg:x="626" fg:w="5"/><text x="98.9882%" y="415.50"></text></g><g><title>boggle`main (632 samples, 99.68%)</title><rect x="0.0000%" y="485" width="99.6845%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="632"/><text x="0.2500%" y="495.50">boggle`main</text></g><g><title>boggle`std::rt::lang_start_internal (632 samples, 99.68%)</title><rect x="0.0000%" y="469" width="99.6845%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="632"/><text x="0.2500%" y="479.50">boggle`std::rt::lang_start_internal</text></g><g><title>boggle`std::rt::lang_start::_{{closure}} (632 samples, 99.68%)</title><rect x="0.0000%" y="453" width="99.6845%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="632"/><text x="0.2500%" y="463.50">boggle`std::rt::lang_start::_{{closure}}</text></g><g><title>boggle`std::sys_common::backtrace::__rust_begin_short_backtrace (632 samples, 99.68%)</title><rect x="0.0000%" y="437" width="99.6845%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="632"/><text x="0.2500%" y="447.50">boggle`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="99.5268%" y="421" width="0.1577%" height="15" fill="rgb(245,203,43)" fg:x="631" fg:w="1"/><text x="99.7768%" y="431.50"></text></g><g><title>dyld`start (633 samples, 99.84%)</title><rect x="0.0000%" y="501" width="99.8423%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="633"/><text x="0.2500%" y="511.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (1 samples, 0.16%)</title><rect x="99.6845%" y="485" width="0.1577%" height="15" fill="rgb(231,56,7)" fg:x="632" fg:w="1"/><text x="99.9345%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.16%)</title><rect x="99.6845%" y="469" width="0.1577%" height="15" fill="rgb(244,186,29)" fg:x="632" fg:w="1"/><text x="99.9345%" y="479.50"></text></g><g><title>all (634 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="634"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.16%)</title><rect x="99.8423%" y="501" width="0.1577%" height="15" fill="rgb(241,149,10)" fg:x="633" fg:w="1"/><text x="100.0923%" y="511.50"></text></g></svg></svg>
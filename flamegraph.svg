<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="2306"><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="9.7138%" y="69" width="0.0434%" height="15" fill="rgb(227,0,7)" fg:x="224" fg:w="1"/><text x="9.9638%" y="79.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.26%)</title><rect x="9.5837%" y="101" width="0.2602%" height="15" fill="rgb(217,0,24)" fg:x="221" fg:w="6"/><text x="9.8337%" y="111.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.22%)</title><rect x="9.6271%" y="85" width="0.2168%" height="15" fill="rgb(221,193,54)" fg:x="222" fg:w="5"/><text x="9.8771%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.09%)</title><rect x="9.7572%" y="69" width="0.0867%" height="15" fill="rgb(248,212,6)" fg:x="225" fg:w="2"/><text x="10.0072%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2 samples, 0.09%)</title><rect x="9.7572%" y="53" width="0.0867%" height="15" fill="rgb(208,68,35)" fg:x="225" fg:w="2"/><text x="10.0072%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="9.8005%" y="37" width="0.0434%" height="15" fill="rgb(232,128,0)" fg:x="226" fg:w="1"/><text x="10.0505%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (2 samples, 0.09%)</title><rect x="9.8439%" y="85" width="0.0867%" height="15" fill="rgb(207,160,47)" fg:x="227" fg:w="2"/><text x="10.0939%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.09%)</title><rect x="9.8439%" y="69" width="0.0867%" height="15" fill="rgb(228,23,34)" fg:x="227" fg:w="2"/><text x="10.0939%" y="79.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.48%)</title><rect x="9.5403%" y="117" width="0.4770%" height="15" fill="rgb(218,30,26)" fg:x="220" fg:w="11"/><text x="9.7903%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.17%)</title><rect x="9.8439%" y="101" width="0.1735%" height="15" fill="rgb(220,122,19)" fg:x="227" fg:w="4"/><text x="10.0939%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2 samples, 0.09%)</title><rect x="9.9306%" y="85" width="0.0867%" height="15" fill="rgb(250,228,42)" fg:x="229" fg:w="2"/><text x="10.1806%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.09%)</title><rect x="9.9306%" y="69" width="0.0867%" height="15" fill="rgb(240,193,28)" fg:x="229" fg:w="2"/><text x="10.1806%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.22%)</title><rect x="10.0173%" y="117" width="0.2168%" height="15" fill="rgb(216,20,37)" fg:x="231" fg:w="5"/><text x="10.2673%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (3 samples, 0.13%)</title><rect x="10.1041%" y="101" width="0.1301%" height="15" fill="rgb(206,188,39)" fg:x="233" fg:w="3"/><text x="10.3541%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.13%)</title><rect x="10.1041%" y="85" width="0.1301%" height="15" fill="rgb(217,207,13)" fg:x="233" fg:w="3"/><text x="10.3541%" y="95.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.82%)</title><rect x="9.4536%" y="133" width="0.8239%" height="15" fill="rgb(231,73,38)" fg:x="218" fg:w="19"/><text x="9.7036%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="10.2342%" y="117" width="0.0434%" height="15" fill="rgb(225,20,46)" fg:x="236" fg:w="1"/><text x="10.4842%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.04%)</title><rect x="10.2342%" y="101" width="0.0434%" height="15" fill="rgb(210,31,41)" fg:x="236" fg:w="1"/><text x="10.4842%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.35%)</title><rect x="10.2775%" y="133" width="0.3469%" height="15" fill="rgb(221,200,47)" fg:x="237" fg:w="8"/><text x="10.5275%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (8 samples, 0.35%)</title><rect x="10.2775%" y="117" width="0.3469%" height="15" fill="rgb(226,26,5)" fg:x="237" fg:w="8"/><text x="10.5275%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.30%)</title><rect x="10.3209%" y="101" width="0.3036%" height="15" fill="rgb(249,33,26)" fg:x="238" fg:w="7"/><text x="10.5709%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="10.6245%" y="133" width="0.0434%" height="15" fill="rgb(235,183,28)" fg:x="245" fg:w="1"/><text x="10.8745%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.04%)</title><rect x="10.6245%" y="117" width="0.0434%" height="15" fill="rgb(221,5,38)" fg:x="245" fg:w="1"/><text x="10.8745%" y="127.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 1.47%)</title><rect x="9.2368%" y="149" width="1.4744%" height="15" fill="rgb(247,18,42)" fg:x="213" fg:w="34"/><text x="9.4868%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.04%)</title><rect x="10.6678%" y="133" width="0.0434%" height="15" fill="rgb(241,131,45)" fg:x="246" fg:w="1"/><text x="10.9178%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="10.7112%" y="149" width="0.0434%" height="15" fill="rgb(249,31,29)" fg:x="247" fg:w="1"/><text x="10.9612%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.04%)</title><rect x="10.7112%" y="133" width="0.0434%" height="15" fill="rgb(225,111,53)" fg:x="247" fg:w="1"/><text x="10.9612%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.04%)</title><rect x="10.7546%" y="133" width="0.0434%" height="15" fill="rgb(238,160,17)" fg:x="248" fg:w="1"/><text x="11.0046%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (4 samples, 0.17%)</title><rect x="10.7979%" y="133" width="0.1735%" height="15" fill="rgb(214,148,48)" fg:x="249" fg:w="4"/><text x="11.0479%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.17%)</title><rect x="10.7979%" y="117" width="0.1735%" height="15" fill="rgb(232,36,49)" fg:x="249" fg:w="4"/><text x="11.0479%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.52%)</title><rect x="10.7546%" y="149" width="0.5204%" height="15" fill="rgb(209,103,24)" fg:x="248" fg:w="12"/><text x="11.0046%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (7 samples, 0.30%)</title><rect x="10.9714%" y="133" width="0.3036%" height="15" fill="rgb(229,88,8)" fg:x="253" fg:w="7"/><text x="11.2214%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.30%)</title><rect x="10.9714%" y="117" width="0.3036%" height="15" fill="rgb(213,181,19)" fg:x="253" fg:w="7"/><text x="11.2214%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="11.2749%" y="149" width="0.0434%" height="15" fill="rgb(254,191,54)" fg:x="260" fg:w="1"/><text x="11.5249%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.04%)</title><rect x="11.2749%" y="133" width="0.0434%" height="15" fill="rgb(241,83,37)" fg:x="260" fg:w="1"/><text x="11.5249%" y="143.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 2.30%)</title><rect x="9.0633%" y="165" width="2.2984%" height="15" fill="rgb(233,36,39)" fg:x="209" fg:w="53"/><text x="9.3133%" y="175.50">b..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1 samples, 0.04%)</title><rect x="11.3183%" y="149" width="0.0434%" height="15" fill="rgb(226,3,54)" fg:x="261" fg:w="1"/><text x="11.5683%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="11.3617%" y="165" width="0.0434%" height="15" fill="rgb(245,192,40)" fg:x="262" fg:w="1"/><text x="11.6117%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.04%)</title><rect x="11.3617%" y="149" width="0.0434%" height="15" fill="rgb(238,167,29)" fg:x="262" fg:w="1"/><text x="11.6117%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.04%)</title><rect x="11.4918%" y="149" width="0.0434%" height="15" fill="rgb(232,182,51)" fg:x="265" fg:w="1"/><text x="11.7418%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="11.5351%" y="149" width="0.0434%" height="15" fill="rgb(231,60,39)" fg:x="266" fg:w="1"/><text x="11.7851%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (1 samples, 0.04%)</title><rect x="11.5785%" y="149" width="0.0434%" height="15" fill="rgb(208,69,12)" fg:x="267" fg:w="1"/><text x="11.8285%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (4 samples, 0.17%)</title><rect x="11.6219%" y="149" width="0.1735%" height="15" fill="rgb(235,93,37)" fg:x="268" fg:w="4"/><text x="11.8719%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.17%)</title><rect x="11.6219%" y="133" width="0.1735%" height="15" fill="rgb(213,116,39)" fg:x="268" fg:w="4"/><text x="11.8719%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.69%)</title><rect x="11.8387%" y="133" width="0.6938%" height="15" fill="rgb(222,207,29)" fg:x="273" fg:w="16"/><text x="12.0887%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (1 samples, 0.04%)</title><rect x="12.5325%" y="133" width="0.0434%" height="15" fill="rgb(206,96,30)" fg:x="289" fg:w="1"/><text x="12.7825%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (20 samples, 0.87%)</title><rect x="11.7953%" y="149" width="0.8673%" height="15" fill="rgb(218,138,4)" fg:x="272" fg:w="20"/><text x="12.0453%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.09%)</title><rect x="12.5759%" y="133" width="0.0867%" height="15" fill="rgb(250,191,14)" fg:x="290" fg:w="2"/><text x="12.8259%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (30 samples, 1.30%)</title><rect x="11.4050%" y="165" width="1.3010%" height="15" fill="rgb(239,60,40)" fg:x="263" fg:w="30"/><text x="11.6550%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`___chkstk_darwin (1 samples, 0.04%)</title><rect x="12.6626%" y="149" width="0.0434%" height="15" fill="rgb(206,27,48)" fg:x="292" fg:w="1"/><text x="12.9126%" y="159.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 4.29%)</title><rect x="8.4996%" y="181" width="4.2931%" height="15" fill="rgb(225,35,8)" fg:x="196" fg:w="99"/><text x="8.7496%" y="191.50">boggl..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.09%)</title><rect x="12.7060%" y="165" width="0.0867%" height="15" fill="rgb(250,213,24)" fg:x="293" fg:w="2"/><text x="12.9560%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.09%)</title><rect x="12.7060%" y="149" width="0.0867%" height="15" fill="rgb(247,123,22)" fg:x="293" fg:w="2"/><text x="12.9560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.04%)</title><rect x="12.7927%" y="181" width="0.0434%" height="15" fill="rgb(231,138,38)" fg:x="295" fg:w="1"/><text x="13.0427%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="12.8361%" y="181" width="0.0434%" height="15" fill="rgb(231,145,46)" fg:x="296" fg:w="1"/><text x="13.0861%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.04%)</title><rect x="12.8361%" y="165" width="0.0434%" height="15" fill="rgb(251,118,11)" fg:x="296" fg:w="1"/><text x="13.0861%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.17%)</title><rect x="13.0963%" y="165" width="0.1735%" height="15" fill="rgb(217,147,25)" fg:x="302" fg:w="4"/><text x="13.3463%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="13.2697%" y="165" width="0.0434%" height="15" fill="rgb(247,81,37)" fg:x="306" fg:w="1"/><text x="13.5197%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (8 samples, 0.35%)</title><rect x="13.3131%" y="165" width="0.3469%" height="15" fill="rgb(209,12,38)" fg:x="307" fg:w="8"/><text x="13.5631%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.35%)</title><rect x="13.3131%" y="149" width="0.3469%" height="15" fill="rgb(227,1,9)" fg:x="307" fg:w="8"/><text x="13.5631%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.56%)</title><rect x="13.6600%" y="149" width="0.5637%" height="15" fill="rgb(248,47,43)" fg:x="315" fg:w="13"/><text x="13.9100%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (1 samples, 0.04%)</title><rect x="14.2238%" y="149" width="0.0434%" height="15" fill="rgb(221,10,30)" fg:x="328" fg:w="1"/><text x="14.4738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (33 samples, 1.43%)</title><rect x="12.8794%" y="181" width="1.4310%" height="15" fill="rgb(210,229,1)" fg:x="297" fg:w="33"/><text x="13.1294%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (15 samples, 0.65%)</title><rect x="13.6600%" y="165" width="0.6505%" height="15" fill="rgb(222,148,37)" fg:x="315" fg:w="15"/><text x="13.9100%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="14.2671%" y="149" width="0.0434%" height="15" fill="rgb(234,67,33)" fg:x="329" fg:w="1"/><text x="14.5171%" y="159.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (157 samples, 6.81%)</title><rect x="7.5889%" y="197" width="6.8083%" height="15" fill="rgb(247,98,35)" fg:x="175" fg:w="157"/><text x="7.8389%" y="207.50">boggle`&lt;h..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.09%)</title><rect x="14.3105%" y="181" width="0.0867%" height="15" fill="rgb(247,138,52)" fg:x="330" fg:w="2"/><text x="14.5605%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.09%)</title><rect x="14.3105%" y="165" width="0.0867%" height="15" fill="rgb(213,79,30)" fg:x="330" fg:w="2"/><text x="14.5605%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="14.4406%" y="181" width="0.0434%" height="15" fill="rgb(246,177,23)" fg:x="333" fg:w="1"/><text x="14.6906%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.04%)</title><rect x="14.4840%" y="181" width="0.0434%" height="15" fill="rgb(230,62,27)" fg:x="334" fg:w="1"/><text x="14.7340%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.17%)</title><rect x="14.3972%" y="197" width="0.1735%" height="15" fill="rgb(216,154,8)" fg:x="332" fg:w="4"/><text x="14.6472%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.04%)</title><rect x="14.5273%" y="181" width="0.0434%" height="15" fill="rgb(244,35,45)" fg:x="335" fg:w="1"/><text x="14.7773%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.04%)</title><rect x="14.5273%" y="165" width="0.0434%" height="15" fill="rgb(251,115,12)" fg:x="335" fg:w="1"/><text x="14.7773%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.13%)</title><rect x="14.7875%" y="181" width="0.1301%" height="15" fill="rgb(240,54,50)" fg:x="341" fg:w="3"/><text x="15.0375%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.04%)</title><rect x="14.9176%" y="181" width="0.0434%" height="15" fill="rgb(233,84,52)" fg:x="344" fg:w="1"/><text x="15.1676%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="14.9610%" y="181" width="0.0434%" height="15" fill="rgb(207,117,47)" fg:x="345" fg:w="1"/><text x="15.2110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (1 samples, 0.04%)</title><rect x="15.0043%" y="181" width="0.0434%" height="15" fill="rgb(249,43,39)" fg:x="346" fg:w="1"/><text x="15.2543%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (10 samples, 0.43%)</title><rect x="15.0477%" y="181" width="0.4337%" height="15" fill="rgb(209,38,44)" fg:x="347" fg:w="10"/><text x="15.2977%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.43%)</title><rect x="15.0477%" y="165" width="0.4337%" height="15" fill="rgb(236,212,23)" fg:x="347" fg:w="10"/><text x="15.2977%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 1.26%)</title><rect x="15.5681%" y="165" width="1.2576%" height="15" fill="rgb(242,79,21)" fg:x="359" fg:w="29"/><text x="15.8181%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (53 samples, 2.30%)</title><rect x="14.5707%" y="197" width="2.2984%" height="15" fill="rgb(211,96,35)" fg:x="336" fg:w="53"/><text x="14.8207%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (32 samples, 1.39%)</title><rect x="15.4814%" y="181" width="1.3877%" height="15" fill="rgb(253,215,40)" fg:x="357" fg:w="32"/><text x="15.7314%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (1 samples, 0.04%)</title><rect x="16.8257%" y="165" width="0.0434%" height="15" fill="rgb(211,81,21)" fg:x="388" fg:w="1"/><text x="17.0757%" y="175.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (243 samples, 10.54%)</title><rect x="6.5915%" y="213" width="10.5377%" height="15" fill="rgb(208,190,38)" fg:x="152" fg:w="243"/><text x="6.8415%" y="223.50">boggle`&lt;hashbro..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (6 samples, 0.26%)</title><rect x="16.8690%" y="197" width="0.2602%" height="15" fill="rgb(235,213,38)" fg:x="389" fg:w="6"/><text x="17.1190%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.26%)</title><rect x="16.8690%" y="181" width="0.2602%" height="15" fill="rgb(237,122,38)" fg:x="389" fg:w="6"/><text x="17.1190%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.09%)</title><rect x="17.1292%" y="197" width="0.0867%" height="15" fill="rgb(244,218,35)" fg:x="395" fg:w="2"/><text x="17.3792%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.13%)</title><rect x="17.1292%" y="213" width="0.1301%" height="15" fill="rgb(240,68,47)" fg:x="395" fg:w="3"/><text x="17.3792%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.04%)</title><rect x="17.2160%" y="197" width="0.0434%" height="15" fill="rgb(210,16,53)" fg:x="397" fg:w="1"/><text x="17.4660%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (1 samples, 0.04%)</title><rect x="17.5195%" y="197" width="0.0434%" height="15" fill="rgb(235,124,12)" fg:x="404" fg:w="1"/><text x="17.7695%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.13%)</title><rect x="17.5629%" y="197" width="0.1301%" height="15" fill="rgb(224,169,11)" fg:x="405" fg:w="3"/><text x="17.8129%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.04%)</title><rect x="17.6930%" y="197" width="0.0434%" height="15" fill="rgb(250,166,2)" fg:x="408" fg:w="1"/><text x="17.9430%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.09%)</title><rect x="17.7363%" y="197" width="0.0867%" height="15" fill="rgb(242,216,29)" fg:x="409" fg:w="2"/><text x="17.9863%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (15 samples, 0.65%)</title><rect x="17.8231%" y="197" width="0.6505%" height="15" fill="rgb(230,116,27)" fg:x="411" fg:w="15"/><text x="18.0731%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.65%)</title><rect x="17.8231%" y="181" width="0.6505%" height="15" fill="rgb(228,99,48)" fg:x="411" fg:w="15"/><text x="18.0731%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 1.82%)</title><rect x="18.5169%" y="181" width="1.8213%" height="15" fill="rgb(253,11,6)" fg:x="427" fg:w="42"/><text x="18.7669%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (1 samples, 0.04%)</title><rect x="20.3382%" y="181" width="0.0434%" height="15" fill="rgb(247,143,39)" fg:x="469" fg:w="1"/><text x="20.5882%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (73 samples, 3.17%)</title><rect x="17.2593%" y="213" width="3.1657%" height="15" fill="rgb(236,97,10)" fg:x="398" fg:w="73"/><text x="17.5093%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (45 samples, 1.95%)</title><rect x="18.4735%" y="197" width="1.9514%" height="15" fill="rgb(233,208,19)" fg:x="426" fg:w="45"/><text x="18.7235%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="20.3816%" y="181" width="0.0434%" height="15" fill="rgb(216,164,2)" fg:x="470" fg:w="1"/><text x="20.6316%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (7 samples, 0.30%)</title><rect x="20.4250%" y="213" width="0.3036%" height="15" fill="rgb(220,129,5)" fg:x="471" fg:w="7"/><text x="20.6750%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.30%)</title><rect x="20.4250%" y="197" width="0.3036%" height="15" fill="rgb(242,17,10)" fg:x="471" fg:w="7"/><text x="20.6750%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.04%)</title><rect x="20.7285%" y="213" width="0.0434%" height="15" fill="rgb(242,107,0)" fg:x="478" fg:w="1"/><text x="20.9785%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.04%)</title><rect x="20.7719%" y="213" width="0.0434%" height="15" fill="rgb(251,28,31)" fg:x="479" fg:w="1"/><text x="21.0219%" y="223.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (357 samples, 15.48%)</title><rect x="5.3773%" y="229" width="15.4814%" height="15" fill="rgb(233,223,10)" fg:x="124" fg:w="357"/><text x="5.6273%" y="239.50">boggle`&lt;hashbrown::raw::..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.04%)</title><rect x="20.8153%" y="213" width="0.0434%" height="15" fill="rgb(215,21,27)" fg:x="480" fg:w="1"/><text x="21.0653%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="20.8586%" y="229" width="0.0434%" height="15" fill="rgb(232,23,21)" fg:x="481" fg:w="1"/><text x="21.1086%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.04%)</title><rect x="20.8586%" y="213" width="0.0434%" height="15" fill="rgb(244,5,23)" fg:x="481" fg:w="1"/><text x="21.1086%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.04%)</title><rect x="21.0755%" y="213" width="0.0434%" height="15" fill="rgb(226,81,46)" fg:x="486" fg:w="1"/><text x="21.3255%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="21.1188%" y="213" width="0.0434%" height="15" fill="rgb(247,70,30)" fg:x="487" fg:w="1"/><text x="21.3688%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (17 samples, 0.74%)</title><rect x="21.1622%" y="213" width="0.7372%" height="15" fill="rgb(212,68,19)" fg:x="488" fg:w="17"/><text x="21.4122%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.74%)</title><rect x="21.1622%" y="197" width="0.7372%" height="15" fill="rgb(240,187,13)" fg:x="488" fg:w="17"/><text x="21.4122%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (35 samples, 1.52%)</title><rect x="22.0729%" y="197" width="1.5178%" height="15" fill="rgb(223,113,26)" fg:x="509" fg:w="35"/><text x="22.3229%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (64 samples, 2.78%)</title><rect x="20.9020%" y="229" width="2.7754%" height="15" fill="rgb(206,192,2)" fg:x="482" fg:w="64"/><text x="21.1520%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (41 samples, 1.78%)</title><rect x="21.8994%" y="213" width="1.7780%" height="15" fill="rgb(241,108,4)" fg:x="505" fg:w="41"/><text x="22.1494%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (2 samples, 0.09%)</title><rect x="23.5906%" y="197" width="0.0867%" height="15" fill="rgb(247,173,49)" fg:x="544" fg:w="2"/><text x="23.8406%" y="207.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (461 samples, 19.99%)</title><rect x="3.8161%" y="245" width="19.9913%" height="15" fill="rgb(224,114,35)" fg:x="88" fg:w="461"/><text x="4.0661%" y="255.50">boggle`&lt;hashbrown::raw::RawTabl..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.13%)</title><rect x="23.6774%" y="229" width="0.1301%" height="15" fill="rgb(245,159,27)" fg:x="546" fg:w="3"/><text x="23.9274%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.13%)</title><rect x="23.6774%" y="213" width="0.1301%" height="15" fill="rgb(245,172,44)" fg:x="546" fg:w="3"/><text x="23.9274%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.09%)</title><rect x="23.8508%" y="229" width="0.0867%" height="15" fill="rgb(236,23,11)" fg:x="550" fg:w="2"/><text x="24.1008%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.17%)</title><rect x="23.8075%" y="245" width="0.1735%" height="15" fill="rgb(205,117,38)" fg:x="549" fg:w="4"/><text x="24.0575%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.04%)</title><rect x="23.9376%" y="229" width="0.0434%" height="15" fill="rgb(237,72,25)" fg:x="552" fg:w="1"/><text x="24.1876%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.04%)</title><rect x="23.9376%" y="213" width="0.0434%" height="15" fill="rgb(244,70,9)" fg:x="552" fg:w="1"/><text x="24.1876%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.26%)</title><rect x="24.1110%" y="229" width="0.2602%" height="15" fill="rgb(217,125,39)" fg:x="556" fg:w="6"/><text x="24.3610%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.04%)</title><rect x="24.3712%" y="229" width="0.0434%" height="15" fill="rgb(235,36,10)" fg:x="562" fg:w="1"/><text x="24.6212%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (19 samples, 0.82%)</title><rect x="24.4146%" y="229" width="0.8239%" height="15" fill="rgb(251,123,47)" fg:x="563" fg:w="19"/><text x="24.6646%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.82%)</title><rect x="24.4146%" y="213" width="0.8239%" height="15" fill="rgb(221,13,13)" fg:x="563" fg:w="19"/><text x="24.6646%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (56 samples, 2.43%)</title><rect x="25.4987%" y="213" width="2.4284%" height="15" fill="rgb(238,131,9)" fg:x="588" fg:w="56"/><text x="25.7487%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (2 samples, 0.09%)</title><rect x="27.9271%" y="213" width="0.0867%" height="15" fill="rgb(211,50,8)" fg:x="644" fg:w="2"/><text x="28.1771%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (94 samples, 4.08%)</title><rect x="23.9809%" y="245" width="4.0763%" height="15" fill="rgb(245,182,24)" fg:x="553" fg:w="94"/><text x="24.2309%" y="255.50">libs..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (65 samples, 2.82%)</title><rect x="25.2385%" y="229" width="2.8187%" height="15" fill="rgb(242,14,37)" fg:x="582" fg:w="65"/><text x="25.4885%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="28.0139%" y="213" width="0.0434%" height="15" fill="rgb(246,228,12)" fg:x="646" fg:w="1"/><text x="28.2639%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.35%)</title><rect x="28.0572%" y="245" width="0.3469%" height="15" fill="rgb(213,55,15)" fg:x="647" fg:w="8"/><text x="28.3072%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.35%)</title><rect x="28.0572%" y="229" width="0.3469%" height="15" fill="rgb(209,9,3)" fg:x="647" fg:w="8"/><text x="28.3072%" y="239.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (600 samples, 26.02%)</title><rect x="2.4284%" y="261" width="26.0191%" height="15" fill="rgb(230,59,30)" fg:x="56" fg:w="600"/><text x="2.6784%" y="271.50">boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as c..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.04%)</title><rect x="28.4042%" y="245" width="0.0434%" height="15" fill="rgb(209,121,21)" fg:x="655" fg:w="1"/><text x="28.6542%" y="255.50"></text></g><g><title>boggle`__rdl_dealloc (1 samples, 0.04%)</title><rect x="28.4475%" y="261" width="0.0434%" height="15" fill="rgb(220,109,13)" fg:x="656" fg:w="1"/><text x="28.6975%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.04%)</title><rect x="28.4909%" y="245" width="0.0434%" height="15" fill="rgb(232,18,1)" fg:x="657" fg:w="1"/><text x="28.7409%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.13%)</title><rect x="28.4909%" y="261" width="0.1301%" height="15" fill="rgb(215,41,42)" fg:x="657" fg:w="3"/><text x="28.7409%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.09%)</title><rect x="28.5343%" y="245" width="0.0867%" height="15" fill="rgb(224,123,36)" fg:x="658" fg:w="2"/><text x="28.7843%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (1 samples, 0.04%)</title><rect x="29.0113%" y="245" width="0.0434%" height="15" fill="rgb(240,125,3)" fg:x="669" fg:w="1"/><text x="29.2613%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.22%)</title><rect x="29.0546%" y="245" width="0.2168%" height="15" fill="rgb(205,98,50)" fg:x="670" fg:w="5"/><text x="29.3046%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.04%)</title><rect x="29.2715%" y="245" width="0.0434%" height="15" fill="rgb(205,185,37)" fg:x="675" fg:w="1"/><text x="29.5215%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="29.3148%" y="245" width="0.0434%" height="15" fill="rgb(238,207,15)" fg:x="676" fg:w="1"/><text x="29.5648%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (16 samples, 0.69%)</title><rect x="29.3582%" y="245" width="0.6938%" height="15" fill="rgb(213,199,42)" fg:x="677" fg:w="16"/><text x="29.6082%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.69%)</title><rect x="29.3582%" y="229" width="0.6938%" height="15" fill="rgb(235,201,11)" fg:x="677" fg:w="16"/><text x="29.6082%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 2.78%)</title><rect x="30.1388%" y="229" width="2.7754%" height="15" fill="rgb(207,46,11)" fg:x="695" fg:w="64"/><text x="30.3888%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`free_small (103 samples, 4.47%)</title><rect x="28.6210%" y="261" width="4.4666%" height="15" fill="rgb(241,35,35)" fg:x="660" fg:w="103"/><text x="28.8710%" y="271.50">libsy..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (70 samples, 3.04%)</title><rect x="30.0520%" y="245" width="3.0356%" height="15" fill="rgb(243,32,47)" fg:x="693" fg:w="70"/><text x="30.3020%" y="255.50">lib..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (4 samples, 0.17%)</title><rect x="32.9141%" y="229" width="0.1735%" height="15" fill="rgb(247,202,23)" fg:x="759" fg:w="4"/><text x="33.1641%" y="239.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (745 samples, 32.31%)</title><rect x="1.0841%" y="277" width="32.3070%" height="15" fill="rgb(219,102,11)" fg:x="25" fg:w="745"/><text x="1.3341%" y="287.50">boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (7 samples, 0.30%)</title><rect x="33.0876%" y="261" width="0.3036%" height="15" fill="rgb(243,110,44)" fg:x="763" fg:w="7"/><text x="33.3376%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.30%)</title><rect x="33.0876%" y="245" width="0.3036%" height="15" fill="rgb(222,74,54)" fg:x="763" fg:w="7"/><text x="33.3376%" y="255.50"></text></g><g><title>boggle`__rdl_dealloc (1 samples, 0.04%)</title><rect x="33.3912%" y="277" width="0.0434%" height="15" fill="rgb(216,99,12)" fg:x="770" fg:w="1"/><text x="33.6412%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.17%)</title><rect x="33.4345%" y="277" width="0.1735%" height="15" fill="rgb(226,22,26)" fg:x="771" fg:w="4"/><text x="33.6845%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="33.5646%" y="261" width="0.0434%" height="15" fill="rgb(217,163,10)" fg:x="774" fg:w="1"/><text x="33.8146%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.09%)</title><rect x="33.6947%" y="261" width="0.0867%" height="15" fill="rgb(213,25,53)" fg:x="777" fg:w="2"/><text x="33.9447%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (3 samples, 0.13%)</title><rect x="33.7814%" y="261" width="0.1301%" height="15" fill="rgb(252,105,26)" fg:x="779" fg:w="3"/><text x="34.0314%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="33.9115%" y="261" width="0.0434%" height="15" fill="rgb(220,39,43)" fg:x="782" fg:w="1"/><text x="34.1615%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (11 samples, 0.48%)</title><rect x="33.9549%" y="261" width="0.4770%" height="15" fill="rgb(229,68,48)" fg:x="783" fg:w="11"/><text x="34.2049%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.48%)</title><rect x="33.9549%" y="245" width="0.4770%" height="15" fill="rgb(252,8,32)" fg:x="783" fg:w="11"/><text x="34.2049%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (51 samples, 2.21%)</title><rect x="34.4753%" y="245" width="2.2116%" height="15" fill="rgb(223,20,43)" fg:x="795" fg:w="51"/><text x="34.7253%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`free_small (74 samples, 3.21%)</title><rect x="33.6080%" y="277" width="3.2090%" height="15" fill="rgb(229,81,49)" fg:x="775" fg:w="74"/><text x="33.8580%" y="287.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (55 samples, 2.39%)</title><rect x="34.4319%" y="261" width="2.3851%" height="15" fill="rgb(236,28,36)" fg:x="794" fg:w="55"/><text x="34.6819%" y="271.50">li..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (3 samples, 0.13%)</title><rect x="36.6869%" y="245" width="0.1301%" height="15" fill="rgb(249,185,26)" fg:x="846" fg:w="3"/><text x="36.9369%" y="255.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (848 samples, 36.77%)</title><rect x="0.3903%" y="293" width="36.7736%" height="15" fill="rgb(249,174,33)" fg:x="9" fg:w="848"/><text x="0.6403%" y="303.50">boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Dr..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.35%)</title><rect x="36.8170%" y="277" width="0.3469%" height="15" fill="rgb(233,201,37)" fg:x="849" fg:w="8"/><text x="37.0670%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.35%)</title><rect x="36.8170%" y="261" width="0.3469%" height="15" fill="rgb(221,78,26)" fg:x="849" fg:w="8"/><text x="37.0670%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.04%)</title><rect x="37.2940%" y="277" width="0.0434%" height="15" fill="rgb(250,127,30)" fg:x="860" fg:w="1"/><text x="37.5440%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="37.3374%" y="277" width="0.0434%" height="15" fill="rgb(230,49,44)" fg:x="861" fg:w="1"/><text x="37.5874%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (9 samples, 0.39%)</title><rect x="37.3807%" y="277" width="0.3903%" height="15" fill="rgb(229,67,23)" fg:x="862" fg:w="9"/><text x="37.6307%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.39%)</title><rect x="37.3807%" y="261" width="0.3903%" height="15" fill="rgb(249,83,47)" fg:x="862" fg:w="9"/><text x="37.6307%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (56 samples, 2.43%)</title><rect x="37.1639%" y="293" width="2.4284%" height="15" fill="rgb(215,43,3)" fg:x="857" fg:w="56"/><text x="37.4139%" y="303.50">li..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (42 samples, 1.82%)</title><rect x="37.7710%" y="277" width="1.8213%" height="15" fill="rgb(238,154,13)" fg:x="871" fg:w="42"/><text x="38.0210%" y="287.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (40 samples, 1.73%)</title><rect x="37.8578%" y="261" width="1.7346%" height="15" fill="rgb(219,56,2)" fg:x="873" fg:w="40"/><text x="38.1078%" y="271.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (914 samples, 39.64%)</title><rect x="0.1301%" y="309" width="39.6357%" height="15" fill="rgb(233,0,4)" fg:x="3" fg:w="914"/><text x="0.3801%" y="319.50">boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.17%)</title><rect x="39.5924%" y="293" width="0.1735%" height="15" fill="rgb(235,30,7)" fg:x="913" fg:w="4"/><text x="39.8424%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.17%)</title><rect x="39.5924%" y="277" width="0.1735%" height="15" fill="rgb(250,79,13)" fg:x="913" fg:w="4"/><text x="39.8424%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.04%)</title><rect x="39.7658%" y="293" width="0.0434%" height="15" fill="rgb(211,146,34)" fg:x="917" fg:w="1"/><text x="40.0158%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.09%)</title><rect x="39.7658%" y="309" width="0.0867%" height="15" fill="rgb(228,22,38)" fg:x="917" fg:w="2"/><text x="40.0158%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.04%)</title><rect x="39.8092%" y="293" width="0.0434%" height="15" fill="rgb(235,168,5)" fg:x="918" fg:w="1"/><text x="40.0592%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.13%)</title><rect x="39.9827%" y="293" width="0.1301%" height="15" fill="rgb(221,155,16)" fg:x="922" fg:w="3"/><text x="40.2327%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (1 samples, 0.04%)</title><rect x="40.1127%" y="293" width="0.0434%" height="15" fill="rgb(215,215,53)" fg:x="925" fg:w="1"/><text x="40.3627%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="40.1127%" y="277" width="0.0434%" height="15" fill="rgb(223,4,10)" fg:x="925" fg:w="1"/><text x="40.3627%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (21 samples, 0.91%)</title><rect x="39.8526%" y="309" width="0.9107%" height="15" fill="rgb(234,103,6)" fg:x="919" fg:w="21"/><text x="40.1026%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (14 samples, 0.61%)</title><rect x="40.1561%" y="293" width="0.6071%" height="15" fill="rgb(227,97,0)" fg:x="926" fg:w="14"/><text x="40.4061%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.61%)</title><rect x="40.1561%" y="277" width="0.6071%" height="15" fill="rgb(234,150,53)" fg:x="926" fg:w="14"/><text x="40.4061%" y="287.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (948 samples, 41.11%)</title><rect x="0.0434%" y="325" width="41.1101%" height="15" fill="rgb(228,201,54)" fg:x="1" fg:w="948"/><text x="0.2934%" y="335.50">boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::dr..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (9 samples, 0.39%)</title><rect x="40.7632%" y="309" width="0.3903%" height="15" fill="rgb(222,22,37)" fg:x="940" fg:w="9"/><text x="41.0132%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (9 samples, 0.39%)</title><rect x="40.7632%" y="293" width="0.3903%" height="15" fill="rgb(237,53,32)" fg:x="940" fg:w="9"/><text x="41.0132%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.04%)</title><rect x="41.1535%" y="309" width="0.0434%" height="15" fill="rgb(233,25,53)" fg:x="949" fg:w="1"/><text x="41.4035%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.17%)</title><rect x="41.1535%" y="325" width="0.1735%" height="15" fill="rgb(210,40,34)" fg:x="949" fg:w="4"/><text x="41.4035%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (3 samples, 0.13%)</title><rect x="41.1969%" y="309" width="0.1301%" height="15" fill="rgb(241,220,44)" fg:x="950" fg:w="3"/><text x="41.4469%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.13%)</title><rect x="41.1969%" y="293" width="0.1301%" height="15" fill="rgb(235,28,35)" fg:x="950" fg:w="3"/><text x="41.4469%" y="303.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (984 samples, 42.67%)</title><rect x="0.0000%" y="341" width="42.6713%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="984"/><text x="0.2500%" y="351.50">boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (31 samples, 1.34%)</title><rect x="41.3270%" y="325" width="1.3443%" height="15" fill="rgb(224,130,29)" fg:x="953" fg:w="31"/><text x="41.5770%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (31 samples, 1.34%)</title><rect x="41.3270%" y="309" width="1.3443%" height="15" fill="rgb(235,212,8)" fg:x="953" fg:w="31"/><text x="41.5770%" y="319.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,015 samples, 44.02%)</title><rect x="0.0000%" y="357" width="44.0156%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="1015"/><text x="0.2500%" y="367.50">boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (31 samples, 1.34%)</title><rect x="42.6713%" y="341" width="1.3443%" height="15" fill="rgb(219,149,13)" fg:x="984" fg:w="31"/><text x="42.9213%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (31 samples, 1.34%)</title><rect x="42.6713%" y="325" width="1.3443%" height="15" fill="rgb(250,156,29)" fg:x="984" fg:w="31"/><text x="42.9213%" y="335.50"></text></g><g><title>boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,017 samples, 44.10%)</title><rect x="0.0000%" y="373" width="44.1023%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="1017"/><text x="0.2500%" y="383.50">boggle`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.09%)</title><rect x="44.0156%" y="357" width="0.0867%" height="15" fill="rgb(216,135,14)" fg:x="1015" fg:w="2"/><text x="44.2656%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.09%)</title><rect x="44.0156%" y="341" width="0.0867%" height="15" fill="rgb(241,47,5)" fg:x="1015" fg:w="2"/><text x="44.2656%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.04%)</title><rect x="44.2758%" y="213" width="0.0434%" height="15" fill="rgb(233,42,35)" fg:x="1021" fg:w="1"/><text x="44.5258%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.09%)</title><rect x="44.2758%" y="245" width="0.0867%" height="15" fill="rgb(231,13,6)" fg:x="1021" fg:w="2"/><text x="44.5258%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.09%)</title><rect x="44.2758%" y="229" width="0.0867%" height="15" fill="rgb(207,181,40)" fg:x="1021" fg:w="2"/><text x="44.5258%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="44.3192%" y="213" width="0.0434%" height="15" fill="rgb(254,173,49)" fg:x="1022" fg:w="1"/><text x="44.5692%" y="223.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.13%)</title><rect x="44.2758%" y="261" width="0.1301%" height="15" fill="rgb(221,1,38)" fg:x="1021" fg:w="3"/><text x="44.5258%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="44.3625%" y="245" width="0.0434%" height="15" fill="rgb(206,124,46)" fg:x="1023" fg:w="1"/><text x="44.6125%" y="255.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="44.4059%" y="261" width="0.0434%" height="15" fill="rgb(249,21,11)" fg:x="1024" fg:w="1"/><text x="44.6559%" y="271.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="44.4926%" y="245" width="0.0434%" height="15" fill="rgb(222,201,40)" fg:x="1026" fg:w="1"/><text x="44.7426%" y="255.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="44.4926%" y="229" width="0.0434%" height="15" fill="rgb(235,61,29)" fg:x="1026" fg:w="1"/><text x="44.7426%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.04%)</title><rect x="44.4926%" y="213" width="0.0434%" height="15" fill="rgb(219,207,3)" fg:x="1026" fg:w="1"/><text x="44.7426%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.04%)</title><rect x="44.4926%" y="197" width="0.0434%" height="15" fill="rgb(222,56,46)" fg:x="1026" fg:w="1"/><text x="44.7426%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.04%)</title><rect x="44.4926%" y="181" width="0.0434%" height="15" fill="rgb(239,76,54)" fg:x="1026" fg:w="1"/><text x="44.7426%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="44.4926%" y="165" width="0.0434%" height="15" fill="rgb(231,124,27)" fg:x="1026" fg:w="1"/><text x="44.7426%" y="175.50"></text></g><g><title>boggle`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="44.5360%" y="229" width="0.0434%" height="15" fill="rgb(249,195,6)" fg:x="1027" fg:w="1"/><text x="44.7860%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="44.5360%" y="213" width="0.0434%" height="15" fill="rgb(237,174,47)" fg:x="1027" fg:w="1"/><text x="44.7860%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="44.5360%" y="197" width="0.0434%" height="15" fill="rgb(206,201,31)" fg:x="1027" fg:w="1"/><text x="44.7860%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="44.5360%" y="181" width="0.0434%" height="15" fill="rgb(231,57,52)" fg:x="1027" fg:w="1"/><text x="44.7860%" y="191.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (2 samples, 0.09%)</title><rect x="44.5794%" y="229" width="0.0867%" height="15" fill="rgb(248,177,22)" fg:x="1028" fg:w="2"/><text x="44.8294%" y="239.50"></text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (1 samples, 0.04%)</title><rect x="44.6661%" y="229" width="0.0434%" height="15" fill="rgb(215,211,37)" fg:x="1030" fg:w="1"/><text x="44.9161%" y="239.50"></text></g><g><title>boggle`__rdl_dealloc (1 samples, 0.04%)</title><rect x="44.7095%" y="213" width="0.0434%" height="15" fill="rgb(241,128,51)" fg:x="1031" fg:w="1"/><text x="44.9595%" y="223.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.09%)</title><rect x="44.8829%" y="181" width="0.0867%" height="15" fill="rgb(227,165,31)" fg:x="1035" fg:w="2"/><text x="45.1329%" y="191.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="44.9263%" y="165" width="0.0434%" height="15" fill="rgb(228,167,24)" fg:x="1036" fg:w="1"/><text x="45.1763%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.04%)</title><rect x="45.0130%" y="101" width="0.0434%" height="15" fill="rgb(228,143,12)" fg:x="1038" fg:w="1"/><text x="45.2630%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="45.0130%" y="85" width="0.0434%" height="15" fill="rgb(249,149,8)" fg:x="1038" fg:w="1"/><text x="45.2630%" y="95.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.13%)</title><rect x="44.9696%" y="149" width="0.1301%" height="15" fill="rgb(243,35,44)" fg:x="1037" fg:w="3"/><text x="45.2196%" y="159.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (3 samples, 0.13%)</title><rect x="44.9696%" y="133" width="0.1301%" height="15" fill="rgb(246,89,9)" fg:x="1037" fg:w="3"/><text x="45.2196%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.13%)</title><rect x="44.9696%" y="117" width="0.1301%" height="15" fill="rgb(233,213,13)" fg:x="1037" fg:w="3"/><text x="45.2196%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="45.0564%" y="101" width="0.0434%" height="15" fill="rgb(233,141,41)" fg:x="1039" fg:w="1"/><text x="45.3064%" y="111.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="45.0997%" y="117" width="0.0434%" height="15" fill="rgb(239,167,4)" fg:x="1040" fg:w="1"/><text x="45.3497%" y="127.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="45.0997%" y="101" width="0.0434%" height="15" fill="rgb(209,217,16)" fg:x="1040" fg:w="1"/><text x="45.3497%" y="111.50"></text></g><g><title>boggle`__rdl_realloc (1 samples, 0.04%)</title><rect x="45.0997%" y="85" width="0.0434%" height="15" fill="rgb(219,88,35)" fg:x="1040" fg:w="1"/><text x="45.3497%" y="95.50"></text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (1 samples, 0.04%)</title><rect x="45.1431%" y="117" width="0.0434%" height="15" fill="rgb(220,193,23)" fg:x="1041" fg:w="1"/><text x="45.3931%" y="127.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (1 samples, 0.04%)</title><rect x="45.1431%" y="101" width="0.0434%" height="15" fill="rgb(230,90,52)" fg:x="1041" fg:w="1"/><text x="45.3931%" y="111.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="45.1431%" y="85" width="0.0434%" height="15" fill="rgb(252,106,19)" fg:x="1041" fg:w="1"/><text x="45.3931%" y="95.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="45.1431%" y="69" width="0.0434%" height="15" fill="rgb(206,74,20)" fg:x="1041" fg:w="1"/><text x="45.3931%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.04%)</title><rect x="45.1431%" y="53" width="0.0434%" height="15" fill="rgb(230,138,44)" fg:x="1041" fg:w="1"/><text x="45.3931%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="45.1431%" y="37" width="0.0434%" height="15" fill="rgb(235,182,43)" fg:x="1041" fg:w="1"/><text x="45.3931%" y="47.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (3 samples, 0.13%)</title><rect x="45.0997%" y="133" width="0.1301%" height="15" fill="rgb(242,16,51)" fg:x="1040" fg:w="3"/><text x="45.3497%" y="143.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::traverse (1 samples, 0.04%)</title><rect x="45.1865%" y="117" width="0.0434%" height="15" fill="rgb(248,9,4)" fg:x="1042" fg:w="1"/><text x="45.4365%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="45.2298%" y="133" width="0.0434%" height="15" fill="rgb(210,31,22)" fg:x="1043" fg:w="1"/><text x="45.4798%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="45.2298%" y="117" width="0.0434%" height="15" fill="rgb(239,54,39)" fg:x="1043" fg:w="1"/><text x="45.4798%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.04%)</title><rect x="45.2298%" y="101" width="0.0434%" height="15" fill="rgb(230,99,41)" fg:x="1043" fg:w="1"/><text x="45.4798%" y="111.50"></text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (5 samples, 0.22%)</title><rect x="45.0997%" y="149" width="0.2168%" height="15" fill="rgb(253,106,12)" fg:x="1040" fg:w="5"/><text x="45.3497%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="45.2732%" y="133" width="0.0434%" height="15" fill="rgb(213,46,41)" fg:x="1044" fg:w="1"/><text x="45.5232%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="45.2732%" y="117" width="0.0434%" height="15" fill="rgb(215,133,35)" fg:x="1044" fg:w="1"/><text x="45.5232%" y="127.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::traverse (3 samples, 0.13%)</title><rect x="45.3166%" y="149" width="0.1301%" height="15" fill="rgb(213,28,5)" fg:x="1045" fg:w="3"/><text x="45.5666%" y="159.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (12 samples, 0.52%)</title><rect x="44.9696%" y="165" width="0.5204%" height="15" fill="rgb(215,77,49)" fg:x="1037" fg:w="12"/><text x="45.2196%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.04%)</title><rect x="45.4467%" y="149" width="0.0434%" height="15" fill="rgb(248,100,22)" fg:x="1048" fg:w="1"/><text x="45.6967%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="45.4900%" y="165" width="0.0434%" height="15" fill="rgb(208,67,9)" fg:x="1049" fg:w="1"/><text x="45.7400%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="45.4900%" y="149" width="0.0434%" height="15" fill="rgb(219,133,21)" fg:x="1049" fg:w="1"/><text x="45.7400%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.04%)</title><rect x="45.4900%" y="133" width="0.0434%" height="15" fill="rgb(246,46,29)" fg:x="1049" fg:w="1"/><text x="45.7400%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="45.4900%" y="117" width="0.0434%" height="15" fill="rgb(246,185,52)" fg:x="1049" fg:w="1"/><text x="45.7400%" y="127.50"></text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (14 samples, 0.61%)</title><rect x="44.9696%" y="181" width="0.6071%" height="15" fill="rgb(252,136,11)" fg:x="1037" fg:w="14"/><text x="45.2196%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="45.5334%" y="165" width="0.0434%" height="15" fill="rgb(219,138,53)" fg:x="1050" fg:w="1"/><text x="45.7834%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="45.5334%" y="149" width="0.0434%" height="15" fill="rgb(211,51,23)" fg:x="1050" fg:w="1"/><text x="45.7834%" y="159.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (29 samples, 1.26%)</title><rect x="44.7528%" y="197" width="1.2576%" height="15" fill="rgb(247,221,28)" fg:x="1032" fg:w="29"/><text x="45.0028%" y="207.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::traverse (10 samples, 0.43%)</title><rect x="45.5768%" y="181" width="0.4337%" height="15" fill="rgb(251,222,45)" fg:x="1051" fg:w="10"/><text x="45.8268%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="46.0104%" y="197" width="0.0434%" height="15" fill="rgb(217,162,53)" fg:x="1061" fg:w="1"/><text x="46.2604%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="46.0104%" y="181" width="0.0434%" height="15" fill="rgb(229,93,14)" fg:x="1061" fg:w="1"/><text x="46.2604%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.04%)</title><rect x="46.0104%" y="165" width="0.0434%" height="15" fill="rgb(209,67,49)" fg:x="1061" fg:w="1"/><text x="46.2604%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="46.0538%" y="197" width="0.0434%" height="15" fill="rgb(213,87,29)" fg:x="1062" fg:w="1"/><text x="46.3038%" y="207.50"></text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (33 samples, 1.43%)</title><rect x="44.7528%" y="213" width="1.4310%" height="15" fill="rgb(205,151,52)" fg:x="1032" fg:w="33"/><text x="45.0028%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.09%)</title><rect x="46.0971%" y="197" width="0.0867%" height="15" fill="rgb(253,215,39)" fg:x="1063" fg:w="2"/><text x="46.3471%" y="207.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (37 samples, 1.60%)</title><rect x="44.7095%" y="229" width="1.6045%" height="15" fill="rgb(221,220,41)" fg:x="1031" fg:w="37"/><text x="44.9595%" y="239.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::traverse (3 samples, 0.13%)</title><rect x="46.1839%" y="213" width="0.1301%" height="15" fill="rgb(218,133,21)" fg:x="1065" fg:w="3"/><text x="46.4339%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="46.3140%" y="229" width="0.0434%" height="15" fill="rgb(221,193,43)" fg:x="1068" fg:w="1"/><text x="46.5640%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="46.3140%" y="213" width="0.0434%" height="15" fill="rgb(240,128,52)" fg:x="1068" fg:w="1"/><text x="46.5640%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.04%)</title><rect x="46.3140%" y="197" width="0.0434%" height="15" fill="rgb(253,114,12)" fg:x="1068" fg:w="1"/><text x="46.5640%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="46.3140%" y="181" width="0.0434%" height="15" fill="rgb(215,223,47)" fg:x="1068" fg:w="1"/><text x="46.5640%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.13%)</title><rect x="46.3573%" y="229" width="0.1301%" height="15" fill="rgb(248,225,23)" fg:x="1069" fg:w="3"/><text x="46.6073%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="46.4441%" y="213" width="0.0434%" height="15" fill="rgb(250,108,0)" fg:x="1071" fg:w="1"/><text x="46.6941%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.04%)</title><rect x="46.4874%" y="229" width="0.0434%" height="15" fill="rgb(228,208,7)" fg:x="1072" fg:w="1"/><text x="46.7374%" y="239.50"></text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (47 samples, 2.04%)</title><rect x="44.5360%" y="245" width="2.0382%" height="15" fill="rgb(244,45,10)" fg:x="1027" fg:w="47"/><text x="44.7860%" y="255.50">b..</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.04%)</title><rect x="46.5308%" y="229" width="0.0434%" height="15" fill="rgb(207,125,25)" fg:x="1073" fg:w="1"/><text x="46.7808%" y="239.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::traverse (2 samples, 0.09%)</title><rect x="46.5742%" y="245" width="0.0867%" height="15" fill="rgb(210,195,18)" fg:x="1074" fg:w="2"/><text x="46.8242%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="46.6609%" y="245" width="0.0434%" height="15" fill="rgb(249,80,12)" fg:x="1076" fg:w="1"/><text x="46.9109%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="46.6609%" y="229" width="0.0434%" height="15" fill="rgb(221,65,9)" fg:x="1076" fg:w="1"/><text x="46.9109%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.04%)</title><rect x="46.6609%" y="213" width="0.0434%" height="15" fill="rgb(235,49,36)" fg:x="1076" fg:w="1"/><text x="46.9109%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="46.6609%" y="197" width="0.0434%" height="15" fill="rgb(225,32,20)" fg:x="1076" fg:w="1"/><text x="46.9109%" y="207.50"></text></g><g><title>boggle`boggle::solver::find_best_acc (53 samples, 2.30%)</title><rect x="44.4493%" y="261" width="2.2984%" height="15" fill="rgb(215,141,46)" fg:x="1025" fg:w="53"/><text x="44.6993%" y="271.50">b..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="46.7042%" y="245" width="0.0434%" height="15" fill="rgb(250,160,47)" fg:x="1077" fg:w="1"/><text x="46.9542%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="46.7042%" y="229" width="0.0434%" height="15" fill="rgb(216,222,40)" fg:x="1077" fg:w="1"/><text x="46.9542%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="46.7476%" y="261" width="0.0434%" height="15" fill="rgb(234,217,39)" fg:x="1078" fg:w="1"/><text x="46.9976%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="46.7476%" y="245" width="0.0434%" height="15" fill="rgb(207,178,40)" fg:x="1078" fg:w="1"/><text x="46.9976%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.04%)</title><rect x="46.7476%" y="229" width="0.0434%" height="15" fill="rgb(221,136,13)" fg:x="1078" fg:w="1"/><text x="46.9976%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="46.7476%" y="213" width="0.0434%" height="15" fill="rgb(249,199,10)" fg:x="1078" fg:w="1"/><text x="46.9976%" y="223.50"></text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (61 samples, 2.65%)</title><rect x="44.1891%" y="277" width="2.6453%" height="15" fill="rgb(249,222,13)" fg:x="1019" fg:w="61"/><text x="44.4391%" y="287.50">bo..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.04%)</title><rect x="46.7910%" y="261" width="0.0434%" height="15" fill="rgb(244,185,38)" fg:x="1079" fg:w="1"/><text x="47.0410%" y="271.50"></text></g><g><title>boggle`boggle::solver::find_best (64 samples, 2.78%)</title><rect x="44.1023%" y="373" width="2.7754%" height="15" fill="rgb(236,202,9)" fg:x="1017" fg:w="64"/><text x="44.3523%" y="383.50">bo..</text></g><g><title>boggle`boggle::solver::find_best_acc (64 samples, 2.78%)</title><rect x="44.1023%" y="357" width="2.7754%" height="15" fill="rgb(250,229,37)" fg:x="1017" fg:w="64"/><text x="44.3523%" y="367.50">bo..</text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (64 samples, 2.78%)</title><rect x="44.1023%" y="341" width="2.7754%" height="15" fill="rgb(206,174,23)" fg:x="1017" fg:w="64"/><text x="44.3523%" y="351.50">bo..</text></g><g><title>boggle`boggle::solver::find_best_acc (64 samples, 2.78%)</title><rect x="44.1023%" y="325" width="2.7754%" height="15" fill="rgb(211,33,43)" fg:x="1017" fg:w="64"/><text x="44.3523%" y="335.50">bo..</text></g><g><title>boggle`boggle::solver::find_best_acc::_{{closure}} (64 samples, 2.78%)</title><rect x="44.1023%" y="309" width="2.7754%" height="15" fill="rgb(245,58,50)" fg:x="1017" fg:w="64"/><text x="44.3523%" y="319.50">bo..</text></g><g><title>boggle`boggle::solver::find_best_acc (62 samples, 2.69%)</title><rect x="44.1891%" y="293" width="2.6886%" height="15" fill="rgb(244,68,36)" fg:x="1019" fg:w="62"/><text x="44.4391%" y="303.50">bo..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="46.8343%" y="277" width="0.0434%" height="15" fill="rgb(232,229,15)" fg:x="1080" fg:w="1"/><text x="47.0843%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="46.8343%" y="261" width="0.0434%" height="15" fill="rgb(254,30,23)" fg:x="1080" fg:w="1"/><text x="47.0843%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.04%)</title><rect x="46.8343%" y="245" width="0.0434%" height="15" fill="rgb(235,160,14)" fg:x="1080" fg:w="1"/><text x="47.0843%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="46.8343%" y="229" width="0.0434%" height="15" fill="rgb(212,155,44)" fg:x="1080" fg:w="1"/><text x="47.0843%" y="239.50"></text></g><g><title>boggle`&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="51.8647%" y="325" width="0.0434%" height="15" fill="rgb(226,2,50)" fg:x="1196" fg:w="1"/><text x="52.1147%" y="335.50"></text></g><g><title>boggle`__rdl_alloc (2 samples, 0.09%)</title><rect x="51.9081%" y="309" width="0.0867%" height="15" fill="rgb(234,177,6)" fg:x="1197" fg:w="2"/><text x="52.1581%" y="319.50"></text></g><g><title>boggle`alloc::raw_vec::finish_grow (9 samples, 0.39%)</title><rect x="51.9948%" y="309" width="0.3903%" height="15" fill="rgb(217,24,9)" fg:x="1199" fg:w="9"/><text x="52.2448%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.39%)</title><rect x="51.9948%" y="293" width="0.3903%" height="15" fill="rgb(220,13,46)" fg:x="1199" fg:w="9"/><text x="52.2448%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.35%)</title><rect x="52.0382%" y="277" width="0.3469%" height="15" fill="rgb(239,221,27)" fg:x="1200" fg:w="8"/><text x="52.2882%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.26%)</title><rect x="52.1249%" y="261" width="0.2602%" height="15" fill="rgb(222,198,25)" fg:x="1202" fg:w="6"/><text x="52.3749%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="52.3417%" y="245" width="0.0434%" height="15" fill="rgb(211,99,13)" fg:x="1207" fg:w="1"/><text x="52.5917%" y="255.50"></text></g><g><title>boggle`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.52%)</title><rect x="51.9081%" y="325" width="0.5204%" height="15" fill="rgb(232,111,31)" fg:x="1197" fg:w="12"/><text x="52.1581%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="52.3851%" y="309" width="0.0434%" height="15" fill="rgb(245,82,37)" fg:x="1208" fg:w="1"/><text x="52.6351%" y="319.50"></text></g><g><title>boggle`core::str::converts::from_utf8 (2 samples, 0.09%)</title><rect x="52.4284%" y="325" width="0.0867%" height="15" fill="rgb(227,149,46)" fg:x="1209" fg:w="2"/><text x="52.6784%" y="335.50"></text></g><g><title>boggle`std::sys::unix::memchr::memchr (4 samples, 0.17%)</title><rect x="52.5152%" y="325" width="0.1735%" height="15" fill="rgb(218,36,50)" fg:x="1211" fg:w="4"/><text x="52.7652%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr$VARIANT$Haswell (4 samples, 0.17%)</title><rect x="52.5152%" y="309" width="0.1735%" height="15" fill="rgb(226,80,48)" fg:x="1211" fg:w="4"/><text x="52.7652%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.09%)</title><rect x="52.6886%" y="325" width="0.0867%" height="15" fill="rgb(238,224,15)" fg:x="1215" fg:w="2"/><text x="52.9386%" y="335.50"></text></g><g><title>boggle`std::io::append_to_string (27 samples, 1.17%)</title><rect x="51.6479%" y="341" width="1.1709%" height="15" fill="rgb(241,136,10)" fg:x="1191" fg:w="27"/><text x="51.8979%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="52.7754%" y="325" width="0.0434%" height="15" fill="rgb(208,32,45)" fg:x="1217" fg:w="1"/><text x="53.0254%" y="335.50"></text></g><g><title>boggle`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 1.26%)</title><rect x="51.6045%" y="357" width="1.2576%" height="15" fill="rgb(207,135,9)" fg:x="1190" fg:w="29"/><text x="51.8545%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="52.8187%" y="341" width="0.0434%" height="15" fill="rgb(206,86,44)" fg:x="1218" fg:w="1"/><text x="53.0687%" y="351.50"></text></g><g><title>boggle`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.35%)</title><rect x="52.8621%" y="357" width="0.3469%" height="15" fill="rgb(245,177,15)" fg:x="1219" fg:w="8"/><text x="53.1121%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.09%)</title><rect x="53.5126%" y="325" width="0.0867%" height="15" fill="rgb(206,64,50)" fg:x="1234" fg:w="2"/><text x="53.7626%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.04%)</title><rect x="53.5993%" y="325" width="0.0434%" height="15" fill="rgb(234,36,40)" fg:x="1236" fg:w="1"/><text x="53.8493%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (57 samples, 2.47%)</title><rect x="53.4692%" y="341" width="2.4718%" height="15" fill="rgb(213,64,8)" fg:x="1233" fg:w="57"/><text x="53.7192%" y="351.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (53 samples, 2.30%)</title><rect x="53.6427%" y="325" width="2.2984%" height="15" fill="rgb(210,75,36)" fg:x="1237" fg:w="53"/><text x="53.8927%" y="335.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (51 samples, 2.21%)</title><rect x="53.7294%" y="309" width="2.2116%" height="15" fill="rgb(229,88,21)" fg:x="1239" fg:w="51"/><text x="53.9794%" y="319.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.65%)</title><rect x="55.2905%" y="293" width="0.6505%" height="15" fill="rgb(252,204,47)" fg:x="1275" fg:w="15"/><text x="55.5405%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.22%)</title><rect x="55.9410%" y="341" width="0.2168%" height="15" fill="rgb(208,77,27)" fg:x="1290" fg:w="5"/><text x="56.1910%" y="351.50"></text></g><g><title>boggle`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,049 samples, 45.49%)</title><rect x="53.2090%" y="357" width="45.4900%" height="15" fill="rgb(221,76,26)" fg:x="1227" fg:w="1049"/><text x="53.4590%" y="367.50">boggle`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (981 samples, 42.54%)</title><rect x="56.1578%" y="341" width="42.5412%" height="15" fill="rgb(225,139,18)" fg:x="1295" fg:w="981"/><text x="56.4078%" y="351.50">libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="98.6990%" y="357" width="0.0434%" height="15" fill="rgb(230,137,11)" fg:x="2276" fg:w="1"/><text x="98.9490%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.39%)</title><rect x="98.7424%" y="357" width="0.3903%" height="15" fill="rgb(212,28,1)" fg:x="2277" fg:w="9"/><text x="98.9924%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.17%)</title><rect x="98.9592%" y="341" width="0.1735%" height="15" fill="rgb(248,164,17)" fg:x="2282" fg:w="4"/><text x="99.2092%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.04%)</title><rect x="99.1327%" y="357" width="0.0434%" height="15" fill="rgb(222,171,42)" fg:x="2286" fg:w="1"/><text x="99.3827%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.26%)</title><rect x="99.1761%" y="357" width="0.2602%" height="15" fill="rgb(243,84,45)" fg:x="2287" fg:w="6"/><text x="99.4261%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.04%)</title><rect x="99.4363%" y="357" width="0.0434%" height="15" fill="rgb(252,49,23)" fg:x="2293" fg:w="1"/><text x="99.6863%" y="367.50"></text></g><g><title>boggle`boggle::word_dict::DictEntry::from_file (1,214 samples, 52.65%)</title><rect x="46.8777%" y="373" width="52.6453%" height="15" fill="rgb(215,19,7)" fg:x="1081" fg:w="1214"/><text x="47.1277%" y="383.50">boggle`boggle::word_dict::DictEntry::from_file</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="99.4796%" y="357" width="0.0434%" height="15" fill="rgb(238,81,41)" fg:x="2294" fg:w="1"/><text x="99.7296%" y="367.50"></text></g><g><title>boggle`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.04%)</title><rect x="99.5230%" y="373" width="0.0434%" height="15" fill="rgb(210,199,37)" fg:x="2295" fg:w="1"/><text x="99.7730%" y="383.50"></text></g><g><title>boggle`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.04%)</title><rect x="99.5663%" y="373" width="0.0434%" height="15" fill="rgb(244,192,49)" fg:x="2296" fg:w="1"/><text x="99.8163%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.04%)</title><rect x="99.6097%" y="373" width="0.0434%" height="15" fill="rgb(226,211,11)" fg:x="2297" fg:w="1"/><text x="99.8597%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.09%)</title><rect x="99.6531%" y="373" width="0.0867%" height="15" fill="rgb(236,162,54)" fg:x="2298" fg:w="2"/><text x="99.9031%" y="383.50"></text></g><g><title>boggle`std::rt::lang_start::_{{closure}} (2,301 samples, 99.78%)</title><rect x="0.0000%" y="421" width="99.7832%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="2301"/><text x="0.2500%" y="431.50">boggle`std::rt::lang_start::_{{closure}}</text></g><g><title>boggle`std::sys_common::backtrace::__rust_begin_short_backtrace (2,301 samples, 99.78%)</title><rect x="0.0000%" y="405" width="99.7832%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="2301"/><text x="0.2500%" y="415.50">boggle`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>boggle`boggle::main (2,301 samples, 99.78%)</title><rect x="0.0000%" y="389" width="99.7832%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="2301"/><text x="0.2500%" y="399.50">boggle`boggle::main</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="99.7398%" y="373" width="0.0434%" height="15" fill="rgb(231,177,25)" fg:x="2300" fg:w="1"/><text x="99.9898%" y="383.50"></text></g><g><title>boggle`main (2,302 samples, 99.83%)</title><rect x="0.0000%" y="453" width="99.8265%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="2302"/><text x="0.2500%" y="463.50">boggle`main</text></g><g><title>boggle`std::rt::lang_start_internal (2,302 samples, 99.83%)</title><rect x="0.0000%" y="437" width="99.8265%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="2302"/><text x="0.2500%" y="447.50">boggle`std::rt::lang_start_internal</text></g><g><title>boggle`std::sync::once::Once::call_inner (1 samples, 0.04%)</title><rect x="99.7832%" y="421" width="0.0434%" height="15" fill="rgb(232,167,36)" fg:x="2301" fg:w="1"/><text x="100.0332%" y="431.50"></text></g><g><title>boggle`std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.04%)</title><rect x="99.7832%" y="405" width="0.0434%" height="15" fill="rgb(244,19,51)" fg:x="2301" fg:w="1"/><text x="100.0332%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="99.7832%" y="389" width="0.0434%" height="15" fill="rgb(224,6,22)" fg:x="2301" fg:w="1"/><text x="100.0332%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.04%)</title><rect x="99.7832%" y="373" width="0.0434%" height="15" fill="rgb(224,145,5)" fg:x="2301" fg:w="1"/><text x="100.0332%" y="383.50"></text></g><g><title>all (2,306 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="2306"/><text x="0.2500%" y="495.50"></text></g><g><title>dyld`start (2,306 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="2306"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (4 samples, 0.17%)</title><rect x="99.8265%" y="453" width="0.1735%" height="15" fill="rgb(208,96,46)" fg:x="2302" fg:w="4"/><text x="100.0765%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.17%)</title><rect x="99.8265%" y="437" width="0.1735%" height="15" fill="rgb(239,3,39)" fg:x="2302" fg:w="4"/><text x="100.0765%" y="447.50"></text></g></svg></svg>